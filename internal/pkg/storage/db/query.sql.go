// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLaunch = `-- name: CreateLaunch :one
insert into launches (launch_type, name, description)
values ($1, $2, $3)
returning id
`

type CreateLaunchParams struct {
	LaunchType  LaunchType
	Name        string
	Description string
}

func (q *Queries) CreateLaunch(ctx context.Context, arg CreateLaunchParams) (int64, error) {
	row := q.db.QueryRow(ctx, createLaunch, arg.LaunchType, arg.Name, arg.Description)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createTrainedModel = `-- name: CreateTrainedModel :one
insert into trained_models (name, description, model_id, model_training_status, training_dataset_id, target_column,
                            launch_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
returning id
`

type CreateTrainedModelParams struct {
	Name                string
	Description         string
	ModelID             int64
	ModelTrainingStatus ModelTrainingStatus
	TrainingDatasetID   int64
	TargetColumn        string
	LaunchID            int64
}

func (q *Queries) CreateTrainedModel(ctx context.Context, arg CreateTrainedModelParams) (int64, error) {
	row := q.db.QueryRow(ctx, createTrainedModel,
		arg.Name,
		arg.Description,
		arg.ModelID,
		arg.ModelTrainingStatus,
		arg.TrainingDatasetID,
		arg.TargetColumn,
		arg.LaunchID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createTrainingHyperparameters = `-- name: CreateTrainingHyperparameters :exec
insert into train_hyperparameters (train_model_id, hyperparameter_id, value)
select $1, unnest($2::bigint[]), unnest($3::text[])
`

type CreateTrainingHyperparametersParams struct {
	TrainModelID      int64
	HyperparameterIds []int64
	Values            []string
}

func (q *Queries) CreateTrainingHyperparameters(ctx context.Context, arg CreateTrainingHyperparametersParams) error {
	_, err := q.db.Exec(ctx, createTrainingHyperparameters, arg.TrainModelID, arg.HyperparameterIds, arg.Values)
	return err
}

const getDataset = `-- name: GetDataset :one
select id,
       status,
       creator_id,
       rows_count
from datasets
where id = $1
`

type GetDatasetRow struct {
	ID        int64
	Status    DatasetStatus
	CreatorID int64
	RowsCount int64
}

func (q *Queries) GetDataset(ctx context.Context, id int64) (GetDatasetRow, error) {
	row := q.db.QueryRow(ctx, getDataset, id)
	var i GetDatasetRow
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.CreatorID,
		&i.RowsCount,
	)
	return i, err
}

const getDatasetSchema = `-- name: GetDatasetSchema :many
select column_name, column_type
from dataset_schemas
where dataset_id = $1
order by column_number
`

type GetDatasetSchemaRow struct {
	ColumnName string
	ColumnType string
}

func (q *Queries) GetDatasetSchema(ctx context.Context, datasetID int64) ([]GetDatasetSchemaRow, error) {
	rows, err := q.db.Query(ctx, getDatasetSchema, datasetID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDatasetSchemaRow
	for rows.Next() {
		var i GetDatasetSchemaRow
		if err := rows.Scan(&i.ColumnName, &i.ColumnType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTrainedModelMetrics = `-- name: GetTrainedModelMetrics :many
select train_metrics.launch_id, trained_model_id, metric_id, value, id, name, description, model_id, model_training_status, training_dataset_id, target_column, train_error, created_at, updated_at, tm.launch_id
from train_metrics
         join trained_models tm on tm.launch_id = $1
`

type GetTrainedModelMetricsRow struct {
	LaunchID            int64
	TrainedModelID      int64
	MetricID            int64
	Value               []byte
	ID                  int64
	Name                string
	Description         string
	ModelID             int64
	ModelTrainingStatus ModelTrainingStatus
	TrainingDatasetID   int64
	TargetColumn        string
	TrainError          pgtype.Text
	CreatedAt           pgtype.Timestamptz
	UpdatedAt           pgtype.Timestamptz
	LaunchID_2          int64
}

func (q *Queries) GetTrainedModelMetrics(ctx context.Context, launchID int64) ([]GetTrainedModelMetricsRow, error) {
	rows, err := q.db.Query(ctx, getTrainedModelMetrics, launchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTrainedModelMetricsRow
	for rows.Next() {
		var i GetTrainedModelMetricsRow
		if err := rows.Scan(
			&i.LaunchID,
			&i.TrainedModelID,
			&i.MetricID,
			&i.Value,
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ModelID,
			&i.ModelTrainingStatus,
			&i.TrainingDatasetID,
			&i.TargetColumn,
			&i.TrainError,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LaunchID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTrainMetrics = `-- name: InsertTrainMetrics :exec
insert into train_metrics (launch_id, trained_model_id, metric_id, value)
VALUES ($1, $2, $3, $4)
`

type InsertTrainMetricsParams struct {
	LaunchID       int64
	TrainedModelID int64
	MetricID       int64
	Value          []byte
}

func (q *Queries) InsertTrainMetrics(ctx context.Context, arg InsertTrainMetricsParams) error {
	_, err := q.db.Exec(ctx, insertTrainMetrics,
		arg.LaunchID,
		arg.TrainedModelID,
		arg.MetricID,
		arg.Value,
	)
	return err
}

const updateLaunchStatus = `-- name: UpdateLaunchStatus :exec
update launches
set launch_error = $2,
    updated_at   = default,
    finished_at  = default
where id = $1
`

type UpdateLaunchStatusParams struct {
	ID          int64
	LaunchError pgtype.Text
}

func (q *Queries) UpdateLaunchStatus(ctx context.Context, arg UpdateLaunchStatusParams) error {
	_, err := q.db.Exec(ctx, updateLaunchStatus, arg.ID, arg.LaunchError)
	return err
}

const updateTrainedModelStatus = `-- name: UpdateTrainedModelStatus :exec
update trained_models
set train_error           = $2,
    model_training_status = $3
where id = $1
`

type UpdateTrainedModelStatusParams struct {
	ID                  int64
	TrainError          pgtype.Text
	ModelTrainingStatus ModelTrainingStatus
}

func (q *Queries) UpdateTrainedModelStatus(ctx context.Context, arg UpdateTrainedModelStatusParams) error {
	_, err := q.db.Exec(ctx, updateTrainedModelStatus, arg.ID, arg.TrainError, arg.ModelTrainingStatus)
	return err
}
