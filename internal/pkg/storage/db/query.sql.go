// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLaunch = `-- name: CreateLaunch :one
insert into launches (launch_type, name, description)
values ($1, $2, $3)
returning id
`

type CreateLaunchParams struct {
	LaunchType  LaunchType
	Name        string
	Description string
}

func (q *Queries) CreateLaunch(ctx context.Context, arg CreateLaunchParams) (int64, error) {
	row := q.db.QueryRow(ctx, createLaunch, arg.LaunchType, arg.Name, arg.Description)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createTrainedModel = `-- name: CreateTrainedModel :one
insert into trained_models (name, description, model_id, model_training_status, training_dataset_id, target_column,
                            launch_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
returning id
`

type CreateTrainedModelParams struct {
	Name                string
	Description         string
	ModelID             int64
	ModelTrainingStatus ModelTrainingStatus
	TrainingDatasetID   int64
	TargetColumn        string
	LaunchID            int64
}

func (q *Queries) CreateTrainedModel(ctx context.Context, arg CreateTrainedModelParams) (int64, error) {
	row := q.db.QueryRow(ctx, createTrainedModel,
		arg.Name,
		arg.Description,
		arg.ModelID,
		arg.ModelTrainingStatus,
		arg.TrainingDatasetID,
		arg.TargetColumn,
		arg.LaunchID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createTrainingHyperparameters = `-- name: CreateTrainingHyperparameters :exec
insert into train_hyperparameters (train_model_id, hyperparameter_id, value)
select $1, unnest($2::bigint[]), unnest($3::jsonb[])
`

type CreateTrainingHyperparametersParams struct {
	TrainModelID      int64
	HyperparameterIds []int64
	Values            [][]byte
}

func (q *Queries) CreateTrainingHyperparameters(ctx context.Context, arg CreateTrainingHyperparametersParams) error {
	_, err := q.db.Exec(ctx, createTrainingHyperparameters, arg.TrainModelID, arg.HyperparameterIds, arg.Values)
	return err
}

const updateLaunchStatus = `-- name: UpdateLaunchStatus :exec
update launches
set launch_error = $2,
    updated_at   = default,
    finished_at  = default
where id = $1
`

type UpdateLaunchStatusParams struct {
	ID          int64
	LaunchError pgtype.Text
}

func (q *Queries) UpdateLaunchStatus(ctx context.Context, arg UpdateLaunchStatusParams) error {
	_, err := q.db.Exec(ctx, updateLaunchStatus, arg.ID, arg.LaunchError)
	return err
}

const updateTrainedModelStatus = `-- name: UpdateTrainedModelStatus :exec
update trained_models
set train_error           = $2,
    model_training_status = $3
where id = $1
`

type UpdateTrainedModelStatusParams struct {
	ID                  int64
	TrainError          pgtype.Text
	ModelTrainingStatus ModelTrainingStatus
}

func (q *Queries) UpdateTrainedModelStatus(ctx context.Context, arg UpdateTrainedModelStatusParams) error {
	_, err := q.db.Exec(ctx, updateTrainedModelStatus, arg.ID, arg.TrainError, arg.ModelTrainingStatus)
	return err
}
