syntax = "proto3";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

package github.hse_experiments_platform.launcher;

option go_package = "github.com/hse-experiments-platform/launcher;launcher";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "HSE MLOps Launcher service";
    version: "1.0";
    description: "Launcher service for mlops project.",
  };

  security_definitions: {
    security: {
      key: "AccessToken";
      value: {
        type: TYPE_API_KEY;
        description: "Enter the token with the `Bearer: ` prefix, e.g. \"Bearer abcde12345\""
        in: IN_HEADER;
        name: "Authorization";
      }
    }
  };

  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
};

service LauncherService {
  rpc GetLaunches(GetLaunchesRequest) returns (GetLaunchesResponse) {
    option (google.api.http) = {
      get: "/api/v1/launches"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }
  rpc LaunchDatasetUpload(LaunchDatasetUploadRequest) returns (LaunchDatasetUploadResponse) {
    option (google.api.http) = {
      post: "/api/v1/launches/dataset_upload"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc GetDatasetUploadLaunch(GetDatasetUploadLaunchRequest) returns (GetDatasetUploadLaunchResponse) {
    option (google.api.http) = {
      get: "/api/v1/launches/dataset_upload/{launchID}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc LaunchDatasetSetTypes(LaunchDatasetSetTypesRequest) returns (LaunchDatasetSetTypesResponse) {
    option (google.api.http) = {
      post: "/api/v1/launches/dataset_set_types"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc GetDatasetSetTypesLaunch(GetDatasetSetTypesLaunchRequest) returns (GetDatasetSetTypesLaunchResponse) {
    option (google.api.http) = {
      get: "/api/v1/launches/dataset_set_types/{launchID}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc LaunchDatasetPreprocess(LaunchDatasetPreprocessRequest) returns (LaunchDatasetPreprocessResponse) {
    option (google.api.http) = {
      post: "/api/v1/launches/dataset_preprocess"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc GetDatasetPreprocessLaunch(GetDatasetPreprocessLaunchRequest) returns (GetDatasetPreprocessLaunchResponse) {
    option (google.api.http) = {
      get: "/api/v1/launches/dataset_preprocess/{launchID}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc LaunchTrain(LaunchTrainRequest) returns (LaunchTrainResponse) {
    option (google.api.http) = {
      post: "/api/v1/launches/train"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc GetTrainLaunch(GetTrainLaunchRequest) returns (GetTrainLaunchResponse) {
    option (google.api.http) = {
      get: "/api/v1/launches/train/{launchID}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc LaunchPredict(LaunchPredictRequest) returns (LaunchPredictResponse) {
    option (google.api.http) = {
      post: "/api/v1/launches/predict"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc GetPredictLaunch(GetPredictLaunchRequest) returns (GetPredictLaunchResponse) {
    option (google.api.http) = {
      get: "/api/v1/launches/predict/{launchID}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc GetPredictionResultDownloadLink(GetPredictionResultDownloadLinkRequest) returns (GetPredictionResultDownloadLinkResponse) {
    option (google.api.http) = {
      get: "/api/v1/launches/predict/{launchID}/download"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc LaunchGenericConvert(LaunchGenericConvertRequest) returns (LaunchGenericConvertResponse) {
    option (google.api.http) = {
      post: "/api/v1/launches/generic_convert"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc GetGenericConvertLaunch(GetGenericConvertLaunchRequest) returns (GetGenericConvertLaunchResponse) {
    option (google.api.http) = {
      get: "/api/v1/launches/generic_convert/{launchID}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

  rpc WaitForLaunchFinish(WaitForLaunchFinishRequest) returns (WaitForLaunchFinishResponse) {
    option (google.api.http) = {
      post: "/api/v1/launches/{launchID}/wait"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {security_requirement: {key: "AccessToken";value: {}}}
    };
  }

}

message PageInfo {
  uint64 offset = 1;
  uint64 limit = 2;
  uint64 total = 3;
}

enum LaunchStatus {
  LaunchStatusUnknown = 0;
  LaunchStatusNotStarted = 1;
  LaunchStatusInProgress = 2;
  LaunchStatusError = 3;
  LaunchStatusSuccess = 4;
}

enum LaunchType {
  LaunchTypeUnknown = 0;
  LaunchTypeDatasetUpload = 1;
  LaunchTypeDatasetSetTypes = 2;
  LaunchTypeDatasetPreprocess = 3;
  LaunchTypeTrain = 4;
  LaunchTypePredict = 5;
  LaunchTypeGenericConvert = 6;
}

message LaunchInfo {
  uint64 launchID = 1;
  string name = 2;
  string description = 3;
  LaunchType launchType = 4;
  LaunchStatus status = 5;
}

message GetLaunchesRequest {
  uint64 limit = 1;
  uint64 offset = 2;
  string nameQuery = 3;
  LaunchType launchType = 4;
}

message GetLaunchesResponse{
  repeated LaunchInfo launches = 1;
  PageInfo pageInfo = 2;
}

message CommonLaunchInfo {
  string name = 1;
  string description = 2;
}

message LaunchDatasetUploadRequest {
  CommonLaunchInfo launchInfo = 1;
  string url = 2;
  int64 datasetID = 3;
}

message LaunchDatasetUploadResponse {
  int64 launchID = 1;
}

message GetDatasetUploadLaunchRequest {
  int64 launchID = 1;
}

message GetDatasetUploadLaunchResponse {
  LaunchInfo launchInfo = 1;
  string error = 2;
  int64 datasetID = 3;
  map<string, ColumnType> columnTypes = 4; // автоопределенные типы колонок
}

enum ColumnType {
  ColumnTypeUndefined = 0;
  ColumnTypeInteger = 1;
  ColumnTypeFloat = 2;
  ColumnTypeCategorial = 3;
  ColumnTypeDropped = 4;
}

enum FillingTechnique {
  FillingTechniqueUndefined = 0;
  FillingTechniqueConstant = 1;
  FillingTechniqueTypeDefault = 2;
  FillingTechniqueAggregateFunction = 3;
  FillingTechniqueDeleteRow = 4;
}

enum AggregateFunction {
  AggregateFunctionUndefined = 0;
  AggregateFunctionMean = 1;
  AggregateFunctionMedian = 2;
  AggregateFunctionMin = 3;
  AggregateFunctionMax = 4;
  AggregateFunctionMostFrequent = 5;
}

message SetTypeSettings {
  ColumnType type = 1;
  FillingTechnique fillingTechnique = 2;
  AggregateFunction aggregateFunction = 3;
  string fillingValue = 4;
}

message LaunchDatasetSetTypesRequest {
  CommonLaunchInfo launchInfo = 1;
  int64 datasetID = 2;
  int64 newDatasetID = 3;
  map<string, SetTypeSettings> columnTypes = 4;
}

message LaunchDatasetSetTypesResponse {
  int64 launchID = 1;
}

message GetDatasetSetTypesLaunchRequest {
  int64 launchID = 1;
}

message GetDatasetSetTypesLaunchResponse {
  LaunchInfo launchInfo = 1;
  string error = 2;
  int64 datasetID = 3;
  map<string, SetTypeSettings> columnTypes = 4; // установленные типы колонок
}

message PreprocessSettings {
  // TODO: preprocess
}

message LaunchDatasetPreprocessRequest {
  CommonLaunchInfo launchInfo = 1;
  int64 datasetID = 2;
  PreprocessSettings preprocessSettings = 3;
}

message LaunchDatasetPreprocessResponse {
  int64 launchID = 1;
}

message GetDatasetPreprocessLaunchRequest {
  int64 launchID = 1;
}

message GetDatasetPreprocessLaunchResponse {
  LaunchInfo launchInfo = 1;
  string error = 2;
  int64 datasetID = 3;
  PreprocessSettings preprocessSettings = 4;
}

message TrainingModelSettings {
  uint64 modelID = 1;
  map<uint64, string> hyperparameterValues = 2;
}

message TrainingDatasetSettings {
  uint64 datasetID = 1;
  string targetColumn = 2;
  double trainTestSplit = 3;
}

message LaunchTrainRequest {
  CommonLaunchInfo launchInfo = 1;
  TrainingModelSettings modelSettings = 2;
  TrainingDatasetSettings datasetSettings = 3;
  bool useCV = 4;
  int64 cvChunks = 5;
  int64 randomSeed = 6;
}

message LaunchTrainResponse {
  int64 launchID = 1;
}

message GetTrainLaunchRequest {
  int64 launchID = 1;
}

message GetTrainLaunchResponse {
  LaunchInfo launchInfo = 1;
  string error = 2;
  int64 datasetID = 3;
  int64 trainedModelID = 4;
  string mlflowRunID = 5;
}

message PredictionModelSettings {
  uint64 trainedModelID = 1;
}

message PredictionDatasetSettings {
  uint64 dataset_id = 1;
  bool usePreprocessingFromTrainDataset = 2;
}

message LaunchPredictRequest {
  CommonLaunchInfo launchInfo = 1;
  int64 trainedModelID = 2;
  int64 datasetID = 3;
}

message LaunchPredictResponse {
  int64 launchID = 1;
}

message GetPredictLaunchRequest {
  int64 launchID = 1;
}

message GetPredictLaunchResponse {
  LaunchInfo launchInfo = 1;
  string error = 2;
  int64 datasetID = 3;
  int64 trainedModelID = 4;
}

message LaunchGenericConvertRequest {
  CommonLaunchInfo launchInfo = 1;
  string s3Object = 2;
  string converterType = 3;
}

message LaunchGenericConvertResponse {
  int64 launchID = 1;
}

message GetGenericConvertLaunchRequest {
  int64 launchID = 1;
}

message GetGenericConvertLaunchResponse {
  LaunchInfo launchInfo = 1;
  string error = 2;
  string inputS3Object = 3;
  string converterType = 4;
  string outputS3File = 5;
}

message WaitForLaunchFinishRequest {
  int64 launchID = 1;
}

message WaitForLaunchFinishResponse {
}

message GetPredictionResultDownloadLinkRequest {
  int64 launchID = 1;
}

message GetPredictionResultDownloadLinkResponse {
  string downloadLink = 1;
}
















