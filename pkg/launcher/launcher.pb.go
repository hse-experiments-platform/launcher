// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: launcher/launcher.proto

package launcher

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LaunchType int32

const (
	LaunchType_LaunchTypeUnknown LaunchType = 0
	LaunchType_LaunchTypeTrain   LaunchType = 1
	LaunchType_LaunchTypePredict LaunchType = 2
	LaunchType_LaunchTypeGeneric LaunchType = 3
)

// Enum value maps for LaunchType.
var (
	LaunchType_name = map[int32]string{
		0: "LaunchTypeUnknown",
		1: "LaunchTypeTrain",
		2: "LaunchTypePredict",
		3: "LaunchTypeGeneric",
	}
	LaunchType_value = map[string]int32{
		"LaunchTypeUnknown": 0,
		"LaunchTypeTrain":   1,
		"LaunchTypePredict": 2,
		"LaunchTypeGeneric": 3,
	}
)

func (x LaunchType) Enum() *LaunchType {
	p := new(LaunchType)
	*p = x
	return p
}

func (x LaunchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaunchType) Descriptor() protoreflect.EnumDescriptor {
	return file_launcher_launcher_proto_enumTypes[0].Descriptor()
}

func (LaunchType) Type() protoreflect.EnumType {
	return &file_launcher_launcher_proto_enumTypes[0]
}

func (x LaunchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaunchType.Descriptor instead.
func (LaunchType) EnumDescriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{0}
}

type TrainStatus int32

const (
	TrainStatus_TrainStatusUnknown    TrainStatus = 0
	TrainStatus_TrainStatusNotStarted TrainStatus = 1
	TrainStatus_TrainStatusInProgress TrainStatus = 2
	TrainStatus_TrainStatusError      TrainStatus = 3
	TrainStatus_TrainStatusDone       TrainStatus = 4
)

// Enum value maps for TrainStatus.
var (
	TrainStatus_name = map[int32]string{
		0: "TrainStatusUnknown",
		1: "TrainStatusNotStarted",
		2: "TrainStatusInProgress",
		3: "TrainStatusError",
		4: "TrainStatusDone",
	}
	TrainStatus_value = map[string]int32{
		"TrainStatusUnknown":    0,
		"TrainStatusNotStarted": 1,
		"TrainStatusInProgress": 2,
		"TrainStatusError":      3,
		"TrainStatusDone":       4,
	}
)

func (x TrainStatus) Enum() *TrainStatus {
	p := new(TrainStatus)
	*p = x
	return p
}

func (x TrainStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrainStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_launcher_launcher_proto_enumTypes[1].Descriptor()
}

func (TrainStatus) Type() protoreflect.EnumType {
	return &file_launcher_launcher_proto_enumTypes[1]
}

func (x TrainStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrainStatus.Descriptor instead.
func (TrainStatus) EnumDescriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{1}
}

type PredictStatus int32

const (
	PredictStatus_PredictStatusUnknown    PredictStatus = 0
	PredictStatus_PredictStatusNotStarted PredictStatus = 1
	PredictStatus_PredictStatusInProgress PredictStatus = 2
	PredictStatus_PredictStatusError      PredictStatus = 3
	PredictStatus_PredictStatusDone       PredictStatus = 4
)

// Enum value maps for PredictStatus.
var (
	PredictStatus_name = map[int32]string{
		0: "PredictStatusUnknown",
		1: "PredictStatusNotStarted",
		2: "PredictStatusInProgress",
		3: "PredictStatusError",
		4: "PredictStatusDone",
	}
	PredictStatus_value = map[string]int32{
		"PredictStatusUnknown":    0,
		"PredictStatusNotStarted": 1,
		"PredictStatusInProgress": 2,
		"PredictStatusError":      3,
		"PredictStatusDone":       4,
	}
)

func (x PredictStatus) Enum() *PredictStatus {
	p := new(PredictStatus)
	*p = x
	return p
}

func (x PredictStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PredictStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_launcher_launcher_proto_enumTypes[2].Descriptor()
}

func (PredictStatus) Type() protoreflect.EnumType {
	return &file_launcher_launcher_proto_enumTypes[2]
}

func (x PredictStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PredictStatus.Descriptor instead.
func (PredictStatus) EnumDescriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{2}
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Total  uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{0}
}

func (x *PageInfo) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PageInfo) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PageInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type TrainingModelSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelID              uint64            `protobuf:"varint,1,opt,name=modelID,proto3" json:"modelID,omitempty"`
	HyperparameterValues map[uint64]string `protobuf:"bytes,2,rep,name=hyperparameterValues,proto3" json:"hyperparameterValues,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrainingModelSettings) Reset() {
	*x = TrainingModelSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingModelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingModelSettings) ProtoMessage() {}

func (x *TrainingModelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingModelSettings.ProtoReflect.Descriptor instead.
func (*TrainingModelSettings) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{1}
}

func (x *TrainingModelSettings) GetModelID() uint64 {
	if x != nil {
		return x.ModelID
	}
	return 0
}

func (x *TrainingModelSettings) GetHyperparameterValues() map[uint64]string {
	if x != nil {
		return x.HyperparameterValues
	}
	return nil
}

type TrainingDatasetSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetID      uint64  `protobuf:"varint,1,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	TargetColumn   string  `protobuf:"bytes,2,opt,name=targetColumn,proto3" json:"targetColumn,omitempty"`
	TrainTestSplit float64 `protobuf:"fixed64,3,opt,name=trainTestSplit,proto3" json:"trainTestSplit,omitempty"`
}

func (x *TrainingDatasetSettings) Reset() {
	*x = TrainingDatasetSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingDatasetSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingDatasetSettings) ProtoMessage() {}

func (x *TrainingDatasetSettings) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingDatasetSettings.ProtoReflect.Descriptor instead.
func (*TrainingDatasetSettings) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{2}
}

func (x *TrainingDatasetSettings) GetDatasetID() uint64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *TrainingDatasetSettings) GetTargetColumn() string {
	if x != nil {
		return x.TargetColumn
	}
	return ""
}

func (x *TrainingDatasetSettings) GetTrainTestSplit() float64 {
	if x != nil {
		return x.TrainTestSplit
	}
	return 0
}

type StartTrainingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ModelSettings   *TrainingModelSettings   `protobuf:"bytes,3,opt,name=modelSettings,proto3" json:"modelSettings,omitempty"`
	DatasetSettings *TrainingDatasetSettings `protobuf:"bytes,4,opt,name=datasetSettings,proto3" json:"datasetSettings,omitempty"`
}

func (x *StartTrainingRequest) Reset() {
	*x = StartTrainingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTrainingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTrainingRequest) ProtoMessage() {}

func (x *StartTrainingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTrainingRequest.ProtoReflect.Descriptor instead.
func (*StartTrainingRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{3}
}

func (x *StartTrainingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartTrainingRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StartTrainingRequest) GetModelSettings() *TrainingModelSettings {
	if x != nil {
		return x.ModelSettings
	}
	return nil
}

func (x *StartTrainingRequest) GetDatasetSettings() *TrainingDatasetSettings {
	if x != nil {
		return x.DatasetSettings
	}
	return nil
}

type StartTrainingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainedModelID uint64 `protobuf:"varint,1,opt,name=trainedModelID,proto3" json:"trainedModelID,omitempty"`
	LaunchID       uint64 `protobuf:"varint,2,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *StartTrainingResponse) Reset() {
	*x = StartTrainingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTrainingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTrainingResponse) ProtoMessage() {}

func (x *StartTrainingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTrainingResponse.ProtoReflect.Descriptor instead.
func (*StartTrainingResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{4}
}

func (x *StartTrainingResponse) GetTrainedModelID() uint64 {
	if x != nil {
		return x.TrainedModelID
	}
	return 0
}

func (x *StartTrainingResponse) GetLaunchID() uint64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type PredictionModelSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainedModelID uint64 `protobuf:"varint,1,opt,name=trainedModelID,proto3" json:"trainedModelID,omitempty"`
}

func (x *PredictionModelSettings) Reset() {
	*x = PredictionModelSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionModelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionModelSettings) ProtoMessage() {}

func (x *PredictionModelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionModelSettings.ProtoReflect.Descriptor instead.
func (*PredictionModelSettings) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{5}
}

func (x *PredictionModelSettings) GetTrainedModelID() uint64 {
	if x != nil {
		return x.TrainedModelID
	}
	return 0
}

type PredictionDatasetSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId uint64 `protobuf:"varint,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"` // TODO: drop columns
}

func (x *PredictionDatasetSettings) Reset() {
	*x = PredictionDatasetSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionDatasetSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionDatasetSettings) ProtoMessage() {}

func (x *PredictionDatasetSettings) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionDatasetSettings.ProtoReflect.Descriptor instead.
func (*PredictionDatasetSettings) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{6}
}

func (x *PredictionDatasetSettings) GetDatasetId() uint64 {
	if x != nil {
		return x.DatasetId
	}
	return 0
}

type StartPredictionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description     string                     `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ModelSettings   *PredictionModelSettings   `protobuf:"bytes,3,opt,name=modelSettings,proto3" json:"modelSettings,omitempty"`
	DatasetSettings *PredictionDatasetSettings `protobuf:"bytes,4,opt,name=datasetSettings,proto3" json:"datasetSettings,omitempty"`
}

func (x *StartPredictionRequest) Reset() {
	*x = StartPredictionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPredictionRequest) ProtoMessage() {}

func (x *StartPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPredictionRequest.ProtoReflect.Descriptor instead.
func (*StartPredictionRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{7}
}

func (x *StartPredictionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartPredictionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StartPredictionRequest) GetModelSettings() *PredictionModelSettings {
	if x != nil {
		return x.ModelSettings
	}
	return nil
}

func (x *StartPredictionRequest) GetDatasetSettings() *PredictionDatasetSettings {
	if x != nil {
		return x.DatasetSettings
	}
	return nil
}

type StartPredictionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID uint64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *StartPredictionResponse) Reset() {
	*x = StartPredictionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartPredictionResponse) ProtoMessage() {}

func (x *StartPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartPredictionResponse.ProtoReflect.Descriptor instead.
func (*StartPredictionResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{8}
}

func (x *StartPredictionResponse) GetLaunchID() uint64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type StartGenericLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LauncherID  uint64 `protobuf:"varint,3,opt,name=launcherID,proto3" json:"launcherID,omitempty"`
}

func (x *StartGenericLaunchRequest) Reset() {
	*x = StartGenericLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartGenericLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGenericLaunchRequest) ProtoMessage() {}

func (x *StartGenericLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGenericLaunchRequest.ProtoReflect.Descriptor instead.
func (*StartGenericLaunchRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{9}
}

func (x *StartGenericLaunchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StartGenericLaunchRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StartGenericLaunchRequest) GetLauncherID() uint64 {
	if x != nil {
		return x.LauncherID
	}
	return 0
}

type StartGenericLaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID uint64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *StartGenericLaunchResponse) Reset() {
	*x = StartGenericLaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartGenericLaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartGenericLaunchResponse) ProtoMessage() {}

func (x *StartGenericLaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartGenericLaunchResponse.ProtoReflect.Descriptor instead.
func (*StartGenericLaunchResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{10}
}

func (x *StartGenericLaunchResponse) GetLaunchID() uint64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type LaunchTypeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeTrain   bool `protobuf:"varint,1,opt,name=IncludeTrain,proto3" json:"IncludeTrain,omitempty"`
	IncludePredict bool `protobuf:"varint,2,opt,name=IncludePredict,proto3" json:"IncludePredict,omitempty"`
	IncludeGeneric bool `protobuf:"varint,3,opt,name=IncludeGeneric,proto3" json:"IncludeGeneric,omitempty"`
}

func (x *LaunchTypeFilter) Reset() {
	*x = LaunchTypeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchTypeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchTypeFilter) ProtoMessage() {}

func (x *LaunchTypeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchTypeFilter.ProtoReflect.Descriptor instead.
func (*LaunchTypeFilter) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{11}
}

func (x *LaunchTypeFilter) GetIncludeTrain() bool {
	if x != nil {
		return x.IncludeTrain
	}
	return false
}

func (x *LaunchTypeFilter) GetIncludePredict() bool {
	if x != nil {
		return x.IncludePredict
	}
	return false
}

func (x *LaunchTypeFilter) GetIncludeGeneric() bool {
	if x != nil {
		return x.IncludeGeneric
	}
	return false
}

type LaunchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID    uint64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *LaunchInfo) Reset() {
	*x = LaunchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchInfo) ProtoMessage() {}

func (x *LaunchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchInfo.ProtoReflect.Descriptor instead.
func (*LaunchInfo) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{12}
}

func (x *LaunchInfo) GetLaunchID() uint64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

func (x *LaunchInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LaunchInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetLaunchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit       uint64            `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      uint64            `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Query       string            `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	LaunchTypes *LaunchTypeFilter `protobuf:"bytes,4,opt,name=launchTypes,proto3" json:"launchTypes,omitempty"`
}

func (x *GetLaunchesRequest) Reset() {
	*x = GetLaunchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLaunchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLaunchesRequest) ProtoMessage() {}

func (x *GetLaunchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLaunchesRequest.ProtoReflect.Descriptor instead.
func (*GetLaunchesRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{13}
}

func (x *GetLaunchesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetLaunchesRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetLaunchesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *GetLaunchesRequest) GetLaunchTypes() *LaunchTypeFilter {
	if x != nil {
		return x.LaunchTypes
	}
	return nil
}

type GetLaunchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Launches []*LaunchInfo `protobuf:"bytes,1,rep,name=launches,proto3" json:"launches,omitempty"`
	PageInfo *PageInfo     `protobuf:"bytes,2,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
}

func (x *GetLaunchesResponse) Reset() {
	*x = GetLaunchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLaunchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLaunchesResponse) ProtoMessage() {}

func (x *GetLaunchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLaunchesResponse.ProtoReflect.Descriptor instead.
func (*GetLaunchesResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{14}
}

func (x *GetLaunchesResponse) GetLaunches() []*LaunchInfo {
	if x != nil {
		return x.Launches
	}
	return nil
}

func (x *GetLaunchesResponse) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetTrainResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID uint64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *GetTrainResultsRequest) Reset() {
	*x = GetTrainResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTrainResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrainResultsRequest) ProtoMessage() {}

func (x *GetTrainResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrainResultsRequest.ProtoReflect.Descriptor instead.
func (*GetTrainResultsRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{15}
}

func (x *GetTrainResultsRequest) GetLaunchID() uint64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Type        string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Value       string `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{16}
}

func (x *Metric) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metric) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Metric) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type GetTrainResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelID        uint64      `protobuf:"varint,1,opt,name=modelID,proto3" json:"modelID,omitempty"`
	TrainedModelID uint64      `protobuf:"varint,2,opt,name=trainedModelID,proto3" json:"trainedModelID,omitempty"`
	Status         TrainStatus `protobuf:"varint,3,opt,name=status,proto3,enum=github.hse_experiments_platform.launcher.TrainStatus" json:"status,omitempty"`
	Metrics        []*Metric   `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *GetTrainResultsResponse) Reset() {
	*x = GetTrainResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTrainResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrainResultsResponse) ProtoMessage() {}

func (x *GetTrainResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrainResultsResponse.ProtoReflect.Descriptor instead.
func (*GetTrainResultsResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{17}
}

func (x *GetTrainResultsResponse) GetModelID() uint64 {
	if x != nil {
		return x.ModelID
	}
	return 0
}

func (x *GetTrainResultsResponse) GetTrainedModelID() uint64 {
	if x != nil {
		return x.TrainedModelID
	}
	return 0
}

func (x *GetTrainResultsResponse) GetStatus() TrainStatus {
	if x != nil {
		return x.Status
	}
	return TrainStatus_TrainStatusUnknown
}

func (x *GetTrainResultsResponse) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type GetPredictResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID uint64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *GetPredictResultsRequest) Reset() {
	*x = GetPredictResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredictResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredictResultsRequest) ProtoMessage() {}

func (x *GetPredictResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredictResultsRequest.ProtoReflect.Descriptor instead.
func (*GetPredictResultsRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{18}
}

func (x *GetPredictResultsRequest) GetLaunchID() uint64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetPredictResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainedModelID  uint64        `protobuf:"varint,1,opt,name=trainedModelID,proto3" json:"trainedModelID,omitempty"`
	Status          PredictStatus `protobuf:"varint,2,opt,name=status,proto3,enum=github.hse_experiments_platform.launcher.PredictStatus" json:"status,omitempty"`
	ResultDatasetID uint64        `protobuf:"varint,3,opt,name=resultDatasetID,proto3" json:"resultDatasetID,omitempty"`
}

func (x *GetPredictResultsResponse) Reset() {
	*x = GetPredictResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredictResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredictResultsResponse) ProtoMessage() {}

func (x *GetPredictResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredictResultsResponse.ProtoReflect.Descriptor instead.
func (*GetPredictResultsResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{19}
}

func (x *GetPredictResultsResponse) GetTrainedModelID() uint64 {
	if x != nil {
		return x.TrainedModelID
	}
	return 0
}

func (x *GetPredictResultsResponse) GetStatus() PredictStatus {
	if x != nil {
		return x.Status
	}
	return PredictStatus_PredictStatusUnknown
}

func (x *GetPredictResultsResponse) GetResultDatasetID() uint64 {
	if x != nil {
		return x.ResultDatasetID
	}
	return 0
}

var File_launcher_launcher_proto protoreflect.FileDescriptor

var file_launcher_launcher_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x8a, 0x02, 0x0a, 0x15,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12,
	0x8d, 0x01, 0x0a, 0x14, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x68, 0x79, 0x70, 0x65, 0x72,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a,
	0x47, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x22, 0xa0,
	0x02, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x65, 0x0a,
	0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x6b, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x5b, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0x41,
	0x0a, 0x17, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x44, 0x22, 0x3a, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa6, 0x02,
	0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67,
	0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68,
	0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6d, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x43, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x35, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0x71, 0x0a,
	0x19, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x38, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x22, 0x5e, 0x0a, 0x0a, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x5c,
	0x0a, 0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x0b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0x78, 0x0a, 0x06,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf6, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22,
	0x36, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x2a, 0x66, 0x0a, 0x0a, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x10, 0x03,
	0x2a, 0x86, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x04, 0x2a, 0x92, 0x01, 0x0a, 0x0d, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x04, 0x32, 0xab,
	0x03, 0x0a, 0x0f, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xc6, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0xce, 0x01, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x96, 0x02, 0x92,
	0x41, 0xdb, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x48, 0x53, 0x45, 0x20, 0x4d, 0x4c, 0x4f, 0x70, 0x73,
	0x20, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x23, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d, 0x6c, 0x6f, 0x70, 0x73, 0x20, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x5a, 0x6a, 0x0a, 0x68, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x59, 0x08, 0x02, 0x12, 0x44, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x60, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x3a, 0x20, 0x60, 0x20, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e, 0x20, 0x22, 0x42, 0x65, 0x61, 0x72, 0x65,
	0x72, 0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x31, 0x32, 0x33, 0x34, 0x35, 0x22, 0x1a, 0x0d, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x5a, 0x35,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x73, 0x65, 0x2d, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x3b, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_launcher_launcher_proto_rawDescOnce sync.Once
	file_launcher_launcher_proto_rawDescData = file_launcher_launcher_proto_rawDesc
)

func file_launcher_launcher_proto_rawDescGZIP() []byte {
	file_launcher_launcher_proto_rawDescOnce.Do(func() {
		file_launcher_launcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_launcher_launcher_proto_rawDescData)
	})
	return file_launcher_launcher_proto_rawDescData
}

var file_launcher_launcher_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_launcher_launcher_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_launcher_launcher_proto_goTypes = []interface{}{
	(LaunchType)(0),                    // 0: github.hse_experiments_platform.launcher.LaunchType
	(TrainStatus)(0),                   // 1: github.hse_experiments_platform.launcher.TrainStatus
	(PredictStatus)(0),                 // 2: github.hse_experiments_platform.launcher.PredictStatus
	(*PageInfo)(nil),                   // 3: github.hse_experiments_platform.launcher.PageInfo
	(*TrainingModelSettings)(nil),      // 4: github.hse_experiments_platform.launcher.TrainingModelSettings
	(*TrainingDatasetSettings)(nil),    // 5: github.hse_experiments_platform.launcher.TrainingDatasetSettings
	(*StartTrainingRequest)(nil),       // 6: github.hse_experiments_platform.launcher.StartTrainingRequest
	(*StartTrainingResponse)(nil),      // 7: github.hse_experiments_platform.launcher.StartTrainingResponse
	(*PredictionModelSettings)(nil),    // 8: github.hse_experiments_platform.launcher.PredictionModelSettings
	(*PredictionDatasetSettings)(nil),  // 9: github.hse_experiments_platform.launcher.PredictionDatasetSettings
	(*StartPredictionRequest)(nil),     // 10: github.hse_experiments_platform.launcher.StartPredictionRequest
	(*StartPredictionResponse)(nil),    // 11: github.hse_experiments_platform.launcher.StartPredictionResponse
	(*StartGenericLaunchRequest)(nil),  // 12: github.hse_experiments_platform.launcher.StartGenericLaunchRequest
	(*StartGenericLaunchResponse)(nil), // 13: github.hse_experiments_platform.launcher.StartGenericLaunchResponse
	(*LaunchTypeFilter)(nil),           // 14: github.hse_experiments_platform.launcher.LaunchTypeFilter
	(*LaunchInfo)(nil),                 // 15: github.hse_experiments_platform.launcher.LaunchInfo
	(*GetLaunchesRequest)(nil),         // 16: github.hse_experiments_platform.launcher.GetLaunchesRequest
	(*GetLaunchesResponse)(nil),        // 17: github.hse_experiments_platform.launcher.GetLaunchesResponse
	(*GetTrainResultsRequest)(nil),     // 18: github.hse_experiments_platform.launcher.GetTrainResultsRequest
	(*Metric)(nil),                     // 19: github.hse_experiments_platform.launcher.Metric
	(*GetTrainResultsResponse)(nil),    // 20: github.hse_experiments_platform.launcher.GetTrainResultsResponse
	(*GetPredictResultsRequest)(nil),   // 21: github.hse_experiments_platform.launcher.GetPredictResultsRequest
	(*GetPredictResultsResponse)(nil),  // 22: github.hse_experiments_platform.launcher.GetPredictResultsResponse
	nil,                                // 23: github.hse_experiments_platform.launcher.TrainingModelSettings.HyperparameterValuesEntry
}
var file_launcher_launcher_proto_depIdxs = []int32{
	23, // 0: github.hse_experiments_platform.launcher.TrainingModelSettings.hyperparameterValues:type_name -> github.hse_experiments_platform.launcher.TrainingModelSettings.HyperparameterValuesEntry
	4,  // 1: github.hse_experiments_platform.launcher.StartTrainingRequest.modelSettings:type_name -> github.hse_experiments_platform.launcher.TrainingModelSettings
	5,  // 2: github.hse_experiments_platform.launcher.StartTrainingRequest.datasetSettings:type_name -> github.hse_experiments_platform.launcher.TrainingDatasetSettings
	8,  // 3: github.hse_experiments_platform.launcher.StartPredictionRequest.modelSettings:type_name -> github.hse_experiments_platform.launcher.PredictionModelSettings
	9,  // 4: github.hse_experiments_platform.launcher.StartPredictionRequest.datasetSettings:type_name -> github.hse_experiments_platform.launcher.PredictionDatasetSettings
	14, // 5: github.hse_experiments_platform.launcher.GetLaunchesRequest.launchTypes:type_name -> github.hse_experiments_platform.launcher.LaunchTypeFilter
	15, // 6: github.hse_experiments_platform.launcher.GetLaunchesResponse.launches:type_name -> github.hse_experiments_platform.launcher.LaunchInfo
	3,  // 7: github.hse_experiments_platform.launcher.GetLaunchesResponse.pageInfo:type_name -> github.hse_experiments_platform.launcher.PageInfo
	1,  // 8: github.hse_experiments_platform.launcher.GetTrainResultsResponse.status:type_name -> github.hse_experiments_platform.launcher.TrainStatus
	19, // 9: github.hse_experiments_platform.launcher.GetTrainResultsResponse.metrics:type_name -> github.hse_experiments_platform.launcher.Metric
	2,  // 10: github.hse_experiments_platform.launcher.GetPredictResultsResponse.status:type_name -> github.hse_experiments_platform.launcher.PredictStatus
	6,  // 11: github.hse_experiments_platform.launcher.LauncherService.StartTraining:input_type -> github.hse_experiments_platform.launcher.StartTrainingRequest
	10, // 12: github.hse_experiments_platform.launcher.LauncherService.StartPrediction:input_type -> github.hse_experiments_platform.launcher.StartPredictionRequest
	7,  // 13: github.hse_experiments_platform.launcher.LauncherService.StartTraining:output_type -> github.hse_experiments_platform.launcher.StartTrainingResponse
	11, // 14: github.hse_experiments_platform.launcher.LauncherService.StartPrediction:output_type -> github.hse_experiments_platform.launcher.StartPredictionResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_launcher_launcher_proto_init() }
func file_launcher_launcher_proto_init() {
	if File_launcher_launcher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_launcher_launcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingModelSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingDatasetSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTrainingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTrainingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionModelSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionDatasetSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartPredictionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartPredictionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartGenericLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartGenericLaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchTypeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLaunchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLaunchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTrainResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTrainResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredictResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredictResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_launcher_launcher_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_launcher_launcher_proto_goTypes,
		DependencyIndexes: file_launcher_launcher_proto_depIdxs,
		EnumInfos:         file_launcher_launcher_proto_enumTypes,
		MessageInfos:      file_launcher_launcher_proto_msgTypes,
	}.Build()
	File_launcher_launcher_proto = out.File
	file_launcher_launcher_proto_rawDesc = nil
	file_launcher_launcher_proto_goTypes = nil
	file_launcher_launcher_proto_depIdxs = nil
}
