// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: launcher/launcher.proto

package launcher

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LaunchStatus int32

const (
	LaunchStatus_LaunchStatusUnknown    LaunchStatus = 0
	LaunchStatus_LaunchStatusNotStarted LaunchStatus = 1
	LaunchStatus_LaunchStatusInProgress LaunchStatus = 2
	LaunchStatus_LaunchStatusError      LaunchStatus = 3
	LaunchStatus_LaunchStatusSuccess    LaunchStatus = 4
)

// Enum value maps for LaunchStatus.
var (
	LaunchStatus_name = map[int32]string{
		0: "LaunchStatusUnknown",
		1: "LaunchStatusNotStarted",
		2: "LaunchStatusInProgress",
		3: "LaunchStatusError",
		4: "LaunchStatusSuccess",
	}
	LaunchStatus_value = map[string]int32{
		"LaunchStatusUnknown":    0,
		"LaunchStatusNotStarted": 1,
		"LaunchStatusInProgress": 2,
		"LaunchStatusError":      3,
		"LaunchStatusSuccess":    4,
	}
)

func (x LaunchStatus) Enum() *LaunchStatus {
	p := new(LaunchStatus)
	*p = x
	return p
}

func (x LaunchStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaunchStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_launcher_launcher_proto_enumTypes[0].Descriptor()
}

func (LaunchStatus) Type() protoreflect.EnumType {
	return &file_launcher_launcher_proto_enumTypes[0]
}

func (x LaunchStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaunchStatus.Descriptor instead.
func (LaunchStatus) EnumDescriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{0}
}

type LaunchType int32

const (
	LaunchType_LaunchTypeUnknown          LaunchType = 0
	LaunchType_LaunchTypeDatasetUpload    LaunchType = 1
	LaunchType_LaunchTypeDatasetSetTypes  LaunchType = 2
	LaunchType_LaunchTypeDatasetTransform LaunchType = 3
	LaunchType_LaunchTypeTrain            LaunchType = 4
	LaunchType_LaunchTypePredict          LaunchType = 5
	LaunchType_LaunchTypeGenericConvert   LaunchType = 6
	LaunchType_LaunchTypeFileUpload       LaunchType = 7
)

// Enum value maps for LaunchType.
var (
	LaunchType_name = map[int32]string{
		0: "LaunchTypeUnknown",
		1: "LaunchTypeDatasetUpload",
		2: "LaunchTypeDatasetSetTypes",
		3: "LaunchTypeDatasetTransform",
		4: "LaunchTypeTrain",
		5: "LaunchTypePredict",
		6: "LaunchTypeGenericConvert",
		7: "LaunchTypeFileUpload",
	}
	LaunchType_value = map[string]int32{
		"LaunchTypeUnknown":          0,
		"LaunchTypeDatasetUpload":    1,
		"LaunchTypeDatasetSetTypes":  2,
		"LaunchTypeDatasetTransform": 3,
		"LaunchTypeTrain":            4,
		"LaunchTypePredict":          5,
		"LaunchTypeGenericConvert":   6,
		"LaunchTypeFileUpload":       7,
	}
)

func (x LaunchType) Enum() *LaunchType {
	p := new(LaunchType)
	*p = x
	return p
}

func (x LaunchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaunchType) Descriptor() protoreflect.EnumDescriptor {
	return file_launcher_launcher_proto_enumTypes[1].Descriptor()
}

func (LaunchType) Type() protoreflect.EnumType {
	return &file_launcher_launcher_proto_enumTypes[1]
}

func (x LaunchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaunchType.Descriptor instead.
func (LaunchType) EnumDescriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{1}
}

type ColumnType int32

const (
	ColumnType_ColumnTypeUndefined  ColumnType = 0
	ColumnType_ColumnTypeInteger    ColumnType = 1
	ColumnType_ColumnTypeFloat      ColumnType = 2
	ColumnType_ColumnTypeCategorial ColumnType = 3
	ColumnType_ColumnTypeDropped    ColumnType = 4
)

// Enum value maps for ColumnType.
var (
	ColumnType_name = map[int32]string{
		0: "ColumnTypeUndefined",
		1: "ColumnTypeInteger",
		2: "ColumnTypeFloat",
		3: "ColumnTypeCategorial",
		4: "ColumnTypeDropped",
	}
	ColumnType_value = map[string]int32{
		"ColumnTypeUndefined":  0,
		"ColumnTypeInteger":    1,
		"ColumnTypeFloat":      2,
		"ColumnTypeCategorial": 3,
		"ColumnTypeDropped":    4,
	}
)

func (x ColumnType) Enum() *ColumnType {
	p := new(ColumnType)
	*p = x
	return p
}

func (x ColumnType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnType) Descriptor() protoreflect.EnumDescriptor {
	return file_launcher_launcher_proto_enumTypes[2].Descriptor()
}

func (ColumnType) Type() protoreflect.EnumType {
	return &file_launcher_launcher_proto_enumTypes[2]
}

func (x ColumnType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnType.Descriptor instead.
func (ColumnType) EnumDescriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{2}
}

type FillingTechnique int32

const (
	FillingTechnique_FillingTechniqueUndefined         FillingTechnique = 0
	FillingTechnique_FillingTechniqueConstant          FillingTechnique = 1
	FillingTechnique_FillingTechniqueTypeDefault       FillingTechnique = 2
	FillingTechnique_FillingTechniqueAggregateFunction FillingTechnique = 3
	FillingTechnique_FillingTechniqueDeleteRow         FillingTechnique = 4
)

// Enum value maps for FillingTechnique.
var (
	FillingTechnique_name = map[int32]string{
		0: "FillingTechniqueUndefined",
		1: "FillingTechniqueConstant",
		2: "FillingTechniqueTypeDefault",
		3: "FillingTechniqueAggregateFunction",
		4: "FillingTechniqueDeleteRow",
	}
	FillingTechnique_value = map[string]int32{
		"FillingTechniqueUndefined":         0,
		"FillingTechniqueConstant":          1,
		"FillingTechniqueTypeDefault":       2,
		"FillingTechniqueAggregateFunction": 3,
		"FillingTechniqueDeleteRow":         4,
	}
)

func (x FillingTechnique) Enum() *FillingTechnique {
	p := new(FillingTechnique)
	*p = x
	return p
}

func (x FillingTechnique) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FillingTechnique) Descriptor() protoreflect.EnumDescriptor {
	return file_launcher_launcher_proto_enumTypes[3].Descriptor()
}

func (FillingTechnique) Type() protoreflect.EnumType {
	return &file_launcher_launcher_proto_enumTypes[3]
}

func (x FillingTechnique) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FillingTechnique.Descriptor instead.
func (FillingTechnique) EnumDescriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{3}
}

type AggregateFunction int32

const (
	AggregateFunction_AggregateFunctionUndefined    AggregateFunction = 0
	AggregateFunction_AggregateFunctionMean         AggregateFunction = 1
	AggregateFunction_AggregateFunctionMedian       AggregateFunction = 2
	AggregateFunction_AggregateFunctionMin          AggregateFunction = 3
	AggregateFunction_AggregateFunctionMax          AggregateFunction = 4
	AggregateFunction_AggregateFunctionMostFrequent AggregateFunction = 5
)

// Enum value maps for AggregateFunction.
var (
	AggregateFunction_name = map[int32]string{
		0: "AggregateFunctionUndefined",
		1: "AggregateFunctionMean",
		2: "AggregateFunctionMedian",
		3: "AggregateFunctionMin",
		4: "AggregateFunctionMax",
		5: "AggregateFunctionMostFrequent",
	}
	AggregateFunction_value = map[string]int32{
		"AggregateFunctionUndefined":    0,
		"AggregateFunctionMean":         1,
		"AggregateFunctionMedian":       2,
		"AggregateFunctionMin":          3,
		"AggregateFunctionMax":          4,
		"AggregateFunctionMostFrequent": 5,
	}
)

func (x AggregateFunction) Enum() *AggregateFunction {
	p := new(AggregateFunction)
	*p = x
	return p
}

func (x AggregateFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregateFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_launcher_launcher_proto_enumTypes[4].Descriptor()
}

func (AggregateFunction) Type() protoreflect.EnumType {
	return &file_launcher_launcher_proto_enumTypes[4]
}

func (x AggregateFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregateFunction.Descriptor instead.
func (AggregateFunction) EnumDescriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{4}
}

type ScalingTechnique int32

const (
	ScalingTechnique_ScalingTechniqueUndefined       ScalingTechnique = 0
	ScalingTechnique_ScalingTechniqueNormalization   ScalingTechnique = 1
	ScalingTechnique_ScalingTechniqueStandardization ScalingTechnique = 2
)

// Enum value maps for ScalingTechnique.
var (
	ScalingTechnique_name = map[int32]string{
		0: "ScalingTechniqueUndefined",
		1: "ScalingTechniqueNormalization",
		2: "ScalingTechniqueStandardization",
	}
	ScalingTechnique_value = map[string]int32{
		"ScalingTechniqueUndefined":       0,
		"ScalingTechniqueNormalization":   1,
		"ScalingTechniqueStandardization": 2,
	}
)

func (x ScalingTechnique) Enum() *ScalingTechnique {
	p := new(ScalingTechnique)
	*p = x
	return p
}

func (x ScalingTechnique) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalingTechnique) Descriptor() protoreflect.EnumDescriptor {
	return file_launcher_launcher_proto_enumTypes[5].Descriptor()
}

func (ScalingTechnique) Type() protoreflect.EnumType {
	return &file_launcher_launcher_proto_enumTypes[5]
}

func (x ScalingTechnique) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalingTechnique.Descriptor instead.
func (ScalingTechnique) EnumDescriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{5}
}

type EncodingTechnique int32

const (
	EncodingTechnique_EncodingTechniqueUndefined      EncodingTechnique = 0
	EncodingTechnique_EncodingTechniqueOneHotEncoding EncodingTechnique = 1
	EncodingTechnique_EncodingTechniqueLabelEncoding  EncodingTechnique = 2
)

// Enum value maps for EncodingTechnique.
var (
	EncodingTechnique_name = map[int32]string{
		0: "EncodingTechniqueUndefined",
		1: "EncodingTechniqueOneHotEncoding",
		2: "EncodingTechniqueLabelEncoding",
	}
	EncodingTechnique_value = map[string]int32{
		"EncodingTechniqueUndefined":      0,
		"EncodingTechniqueOneHotEncoding": 1,
		"EncodingTechniqueLabelEncoding":  2,
	}
)

func (x EncodingTechnique) Enum() *EncodingTechnique {
	p := new(EncodingTechnique)
	*p = x
	return p
}

func (x EncodingTechnique) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodingTechnique) Descriptor() protoreflect.EnumDescriptor {
	return file_launcher_launcher_proto_enumTypes[6].Descriptor()
}

func (EncodingTechnique) Type() protoreflect.EnumType {
	return &file_launcher_launcher_proto_enumTypes[6]
}

func (x EncodingTechnique) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodingTechnique.Descriptor instead.
func (EncodingTechnique) EnumDescriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{6}
}

type OutlinesDetectingMode int32

const (
	OutlinesDetectingMode_OutlinesDetectingModeUnknown                 OutlinesDetectingMode = 0
	OutlinesDetectingMode_OutlinesDetectingModeNone                    OutlinesDetectingMode = 1
	OutlinesDetectingMode_OutlinesDetectingModeUnknownMinMaxThresholds OutlinesDetectingMode = 2
	OutlinesDetectingMode_OutlinesDetectingModeUnknownIQRMethod        OutlinesDetectingMode = 3
)

// Enum value maps for OutlinesDetectingMode.
var (
	OutlinesDetectingMode_name = map[int32]string{
		0: "OutlinesDetectingModeUnknown",
		1: "OutlinesDetectingModeNone",
		2: "OutlinesDetectingModeUnknownMinMaxThresholds",
		3: "OutlinesDetectingModeUnknownIQRMethod",
	}
	OutlinesDetectingMode_value = map[string]int32{
		"OutlinesDetectingModeUnknown":                 0,
		"OutlinesDetectingModeNone":                    1,
		"OutlinesDetectingModeUnknownMinMaxThresholds": 2,
		"OutlinesDetectingModeUnknownIQRMethod":        3,
	}
)

func (x OutlinesDetectingMode) Enum() *OutlinesDetectingMode {
	p := new(OutlinesDetectingMode)
	*p = x
	return p
}

func (x OutlinesDetectingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutlinesDetectingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_launcher_launcher_proto_enumTypes[7].Descriptor()
}

func (OutlinesDetectingMode) Type() protoreflect.EnumType {
	return &file_launcher_launcher_proto_enumTypes[7]
}

func (x OutlinesDetectingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OutlinesDetectingMode.Descriptor instead.
func (OutlinesDetectingMode) EnumDescriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{7}
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Total  uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{0}
}

func (x *PageInfo) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PageInfo) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PageInfo) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type LaunchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID    uint64       `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	LaunchType  LaunchType   `protobuf:"varint,4,opt,name=launchType,proto3,enum=github.hse_experiments_platform.launcher.LaunchType" json:"launchType,omitempty"`
	Status      LaunchStatus `protobuf:"varint,5,opt,name=status,proto3,enum=github.hse_experiments_platform.launcher.LaunchStatus" json:"status,omitempty"`
}

func (x *LaunchInfo) Reset() {
	*x = LaunchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchInfo) ProtoMessage() {}

func (x *LaunchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchInfo.ProtoReflect.Descriptor instead.
func (*LaunchInfo) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{1}
}

func (x *LaunchInfo) GetLaunchID() uint64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

func (x *LaunchInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LaunchInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LaunchInfo) GetLaunchType() LaunchType {
	if x != nil {
		return x.LaunchType
	}
	return LaunchType_LaunchTypeUnknown
}

func (x *LaunchInfo) GetStatus() LaunchStatus {
	if x != nil {
		return x.Status
	}
	return LaunchStatus_LaunchStatusUnknown
}

type GetLaunchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      uint64     `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     uint64     `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	NameQuery  string     `protobuf:"bytes,3,opt,name=nameQuery,proto3" json:"nameQuery,omitempty"`
	LaunchType LaunchType `protobuf:"varint,4,opt,name=launchType,proto3,enum=github.hse_experiments_platform.launcher.LaunchType" json:"launchType,omitempty"`
}

func (x *GetLaunchesRequest) Reset() {
	*x = GetLaunchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLaunchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLaunchesRequest) ProtoMessage() {}

func (x *GetLaunchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLaunchesRequest.ProtoReflect.Descriptor instead.
func (*GetLaunchesRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{2}
}

func (x *GetLaunchesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetLaunchesRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetLaunchesRequest) GetNameQuery() string {
	if x != nil {
		return x.NameQuery
	}
	return ""
}

func (x *GetLaunchesRequest) GetLaunchType() LaunchType {
	if x != nil {
		return x.LaunchType
	}
	return LaunchType_LaunchTypeUnknown
}

type GetLaunchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Launches []*LaunchInfo `protobuf:"bytes,1,rep,name=launches,proto3" json:"launches,omitempty"`
	PageInfo *PageInfo     `protobuf:"bytes,2,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
}

func (x *GetLaunchesResponse) Reset() {
	*x = GetLaunchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLaunchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLaunchesResponse) ProtoMessage() {}

func (x *GetLaunchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLaunchesResponse.ProtoReflect.Descriptor instead.
func (*GetLaunchesResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{3}
}

func (x *GetLaunchesResponse) GetLaunches() []*LaunchInfo {
	if x != nil {
		return x.Launches
	}
	return nil
}

func (x *GetLaunchesResponse) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type CommonLaunchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CommonLaunchInfo) Reset() {
	*x = CommonLaunchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonLaunchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonLaunchInfo) ProtoMessage() {}

func (x *CommonLaunchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonLaunchInfo.ProtoReflect.Descriptor instead.
func (*CommonLaunchInfo) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{4}
}

func (x *CommonLaunchInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommonLaunchInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type LaunchDatasetUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo *CommonLaunchInfo `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	Url        string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	DatasetID  int64             `protobuf:"varint,3,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
}

func (x *LaunchDatasetUploadRequest) Reset() {
	*x = LaunchDatasetUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchDatasetUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchDatasetUploadRequest) ProtoMessage() {}

func (x *LaunchDatasetUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchDatasetUploadRequest.ProtoReflect.Descriptor instead.
func (*LaunchDatasetUploadRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{5}
}

func (x *LaunchDatasetUploadRequest) GetLaunchInfo() *CommonLaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *LaunchDatasetUploadRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LaunchDatasetUploadRequest) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

type LaunchDatasetUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *LaunchDatasetUploadResponse) Reset() {
	*x = LaunchDatasetUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchDatasetUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchDatasetUploadResponse) ProtoMessage() {}

func (x *LaunchDatasetUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchDatasetUploadResponse.ProtoReflect.Descriptor instead.
func (*LaunchDatasetUploadResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{6}
}

func (x *LaunchDatasetUploadResponse) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetDatasetUploadLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *GetDatasetUploadLaunchRequest) Reset() {
	*x = GetDatasetUploadLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetUploadLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetUploadLaunchRequest) ProtoMessage() {}

func (x *GetDatasetUploadLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetUploadLaunchRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetUploadLaunchRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{7}
}

func (x *GetDatasetUploadLaunchRequest) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetDatasetUploadLaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo  *LaunchInfo `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	Error       string      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	DatasetID   int64       `protobuf:"varint,3,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	ColumnNames []string    `protobuf:"bytes,4,rep,name=columnNames,proto3" json:"columnNames,omitempty"`
}

func (x *GetDatasetUploadLaunchResponse) Reset() {
	*x = GetDatasetUploadLaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetUploadLaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetUploadLaunchResponse) ProtoMessage() {}

func (x *GetDatasetUploadLaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetUploadLaunchResponse.ProtoReflect.Descriptor instead.
func (*GetDatasetUploadLaunchResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{8}
}

func (x *GetDatasetUploadLaunchResponse) GetLaunchInfo() *LaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *GetDatasetUploadLaunchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetDatasetUploadLaunchResponse) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *GetDatasetUploadLaunchResponse) GetColumnNames() []string {
	if x != nil {
		return x.ColumnNames
	}
	return nil
}

type SetTypeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type              ColumnType        `protobuf:"varint,1,opt,name=type,proto3,enum=github.hse_experiments_platform.launcher.ColumnType" json:"type,omitempty"`
	FillingTechnique  FillingTechnique  `protobuf:"varint,2,opt,name=fillingTechnique,proto3,enum=github.hse_experiments_platform.launcher.FillingTechnique" json:"fillingTechnique,omitempty"`
	AggregateFunction AggregateFunction `protobuf:"varint,3,opt,name=aggregateFunction,proto3,enum=github.hse_experiments_platform.launcher.AggregateFunction" json:"aggregateFunction,omitempty"`
	FillingValue      string            `protobuf:"bytes,4,opt,name=fillingValue,proto3" json:"fillingValue,omitempty"`
}

func (x *SetTypeSettings) Reset() {
	*x = SetTypeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTypeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTypeSettings) ProtoMessage() {}

func (x *SetTypeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTypeSettings.ProtoReflect.Descriptor instead.
func (*SetTypeSettings) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{9}
}

func (x *SetTypeSettings) GetType() ColumnType {
	if x != nil {
		return x.Type
	}
	return ColumnType_ColumnTypeUndefined
}

func (x *SetTypeSettings) GetFillingTechnique() FillingTechnique {
	if x != nil {
		return x.FillingTechnique
	}
	return FillingTechnique_FillingTechniqueUndefined
}

func (x *SetTypeSettings) GetAggregateFunction() AggregateFunction {
	if x != nil {
		return x.AggregateFunction
	}
	return AggregateFunction_AggregateFunctionUndefined
}

func (x *SetTypeSettings) GetFillingValue() string {
	if x != nil {
		return x.FillingValue
	}
	return ""
}

type LaunchDatasetSetTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo   *CommonLaunchInfo           `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	DatasetID    int64                       `protobuf:"varint,2,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	NewDatasetID int64                       `protobuf:"varint,3,opt,name=newDatasetID,proto3" json:"newDatasetID,omitempty"`
	ColumnTypes  map[string]*SetTypeSettings `protobuf:"bytes,4,rep,name=columnTypes,proto3" json:"columnTypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LaunchDatasetSetTypesRequest) Reset() {
	*x = LaunchDatasetSetTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchDatasetSetTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchDatasetSetTypesRequest) ProtoMessage() {}

func (x *LaunchDatasetSetTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchDatasetSetTypesRequest.ProtoReflect.Descriptor instead.
func (*LaunchDatasetSetTypesRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{10}
}

func (x *LaunchDatasetSetTypesRequest) GetLaunchInfo() *CommonLaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *LaunchDatasetSetTypesRequest) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *LaunchDatasetSetTypesRequest) GetNewDatasetID() int64 {
	if x != nil {
		return x.NewDatasetID
	}
	return 0
}

func (x *LaunchDatasetSetTypesRequest) GetColumnTypes() map[string]*SetTypeSettings {
	if x != nil {
		return x.ColumnTypes
	}
	return nil
}

type LaunchDatasetSetTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *LaunchDatasetSetTypesResponse) Reset() {
	*x = LaunchDatasetSetTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchDatasetSetTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchDatasetSetTypesResponse) ProtoMessage() {}

func (x *LaunchDatasetSetTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchDatasetSetTypesResponse.ProtoReflect.Descriptor instead.
func (*LaunchDatasetSetTypesResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{11}
}

func (x *LaunchDatasetSetTypesResponse) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetDatasetSetTypesLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *GetDatasetSetTypesLaunchRequest) Reset() {
	*x = GetDatasetSetTypesLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetSetTypesLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetSetTypesLaunchRequest) ProtoMessage() {}

func (x *GetDatasetSetTypesLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetSetTypesLaunchRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetSetTypesLaunchRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{12}
}

func (x *GetDatasetSetTypesLaunchRequest) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetDatasetSetTypesLaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo  *LaunchInfo                 `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	Error       string                      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	DatasetID   int64                       `protobuf:"varint,3,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	ColumnTypes map[string]*SetTypeSettings `protobuf:"bytes,4,rep,name=columnTypes,proto3" json:"columnTypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // установленные типы колонок
}

func (x *GetDatasetSetTypesLaunchResponse) Reset() {
	*x = GetDatasetSetTypesLaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetSetTypesLaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetSetTypesLaunchResponse) ProtoMessage() {}

func (x *GetDatasetSetTypesLaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetSetTypesLaunchResponse.ProtoReflect.Descriptor instead.
func (*GetDatasetSetTypesLaunchResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{13}
}

func (x *GetDatasetSetTypesLaunchResponse) GetLaunchInfo() *LaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *GetDatasetSetTypesLaunchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetDatasetSetTypesLaunchResponse) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *GetDatasetSetTypesLaunchResponse) GetColumnTypes() map[string]*SetTypeSettings {
	if x != nil {
		return x.ColumnTypes
	}
	return nil
}

type EmptiesStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FillingTechnique  FillingTechnique  `protobuf:"varint,1,opt,name=fillingTechnique,proto3,enum=github.hse_experiments_platform.launcher.FillingTechnique" json:"fillingTechnique,omitempty"`
	AggregateFunction AggregateFunction `protobuf:"varint,2,opt,name=aggregateFunction,proto3,enum=github.hse_experiments_platform.launcher.AggregateFunction" json:"aggregateFunction,omitempty"`
	FillingValue      string            `protobuf:"bytes,3,opt,name=fillingValue,proto3" json:"fillingValue,omitempty"`
}

func (x *EmptiesStrategy) Reset() {
	*x = EmptiesStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptiesStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptiesStrategy) ProtoMessage() {}

func (x *EmptiesStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptiesStrategy.ProtoReflect.Descriptor instead.
func (*EmptiesStrategy) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{14}
}

func (x *EmptiesStrategy) GetFillingTechnique() FillingTechnique {
	if x != nil {
		return x.FillingTechnique
	}
	return FillingTechnique_FillingTechniqueUndefined
}

func (x *EmptiesStrategy) GetAggregateFunction() AggregateFunction {
	if x != nil {
		return x.AggregateFunction
	}
	return AggregateFunction_AggregateFunctionUndefined
}

func (x *EmptiesStrategy) GetFillingValue() string {
	if x != nil {
		return x.FillingValue
	}
	return ""
}

type OutlinersDetectingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode OutlinesDetectingMode `protobuf:"varint,1,opt,name=mode,proto3,enum=github.hse_experiments_platform.launcher.OutlinesDetectingMode" json:"mode,omitempty"`
	Min  float64               `protobuf:"fixed64,2,opt,name=min,proto3" json:"min,omitempty"`
	Max  float64               `protobuf:"fixed64,3,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *OutlinersDetectingStrategy) Reset() {
	*x = OutlinersDetectingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutlinersDetectingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutlinersDetectingStrategy) ProtoMessage() {}

func (x *OutlinersDetectingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutlinersDetectingStrategy.ProtoReflect.Descriptor instead.
func (*OutlinersDetectingStrategy) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{15}
}

func (x *OutlinersDetectingStrategy) GetMode() OutlinesDetectingMode {
	if x != nil {
		return x.Mode
	}
	return OutlinesDetectingMode_OutlinesDetectingModeUnknown
}

func (x *OutlinersDetectingStrategy) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *OutlinersDetectingStrategy) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type OutlinersReplacementStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplacementMode FillingTechnique  `protobuf:"varint,1,opt,name=replacementMode,proto3,enum=github.hse_experiments_platform.launcher.FillingTechnique" json:"replacementMode,omitempty"`
	AggregateValue  AggregateFunction `protobuf:"varint,2,opt,name=aggregateValue,proto3,enum=github.hse_experiments_platform.launcher.AggregateFunction" json:"aggregateValue,omitempty"`
	ConstantValue   string            `protobuf:"bytes,3,opt,name=constantValue,proto3" json:"constantValue,omitempty"`
}

func (x *OutlinersReplacementStrategy) Reset() {
	*x = OutlinersReplacementStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutlinersReplacementStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutlinersReplacementStrategy) ProtoMessage() {}

func (x *OutlinersReplacementStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutlinersReplacementStrategy.ProtoReflect.Descriptor instead.
func (*OutlinersReplacementStrategy) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{16}
}

func (x *OutlinersReplacementStrategy) GetReplacementMode() FillingTechnique {
	if x != nil {
		return x.ReplacementMode
	}
	return FillingTechnique_FillingTechniqueUndefined
}

func (x *OutlinersReplacementStrategy) GetAggregateValue() AggregateFunction {
	if x != nil {
		return x.AggregateValue
	}
	return AggregateFunction_AggregateFunctionUndefined
}

func (x *OutlinersReplacementStrategy) GetConstantValue() string {
	if x != nil {
		return x.ConstantValue
	}
	return ""
}

type TransformSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScalingTechnique             ScalingTechnique              `protobuf:"varint,1,opt,name=scalingTechnique,proto3,enum=github.hse_experiments_platform.launcher.ScalingTechnique" json:"scalingTechnique,omitempty"`
	EncodingTechnique            EncodingTechnique             `protobuf:"varint,2,opt,name=encodingTechnique,proto3,enum=github.hse_experiments_platform.launcher.EncodingTechnique" json:"encodingTechnique,omitempty"`
	EmptiesStrategy              *EmptiesStrategy              `protobuf:"bytes,3,opt,name=emptiesStrategy,proto3" json:"emptiesStrategy,omitempty"`
	OutlinersDetectingStrategy   *OutlinersDetectingStrategy   `protobuf:"bytes,4,opt,name=outlinersDetectingStrategy,proto3" json:"outlinersDetectingStrategy,omitempty"`
	OutlinersReplacementStrategy *OutlinersReplacementStrategy `protobuf:"bytes,5,opt,name=outlinersReplacementStrategy,proto3" json:"outlinersReplacementStrategy,omitempty"`
}

func (x *TransformSettings) Reset() {
	*x = TransformSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformSettings) ProtoMessage() {}

func (x *TransformSettings) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformSettings.ProtoReflect.Descriptor instead.
func (*TransformSettings) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{17}
}

func (x *TransformSettings) GetScalingTechnique() ScalingTechnique {
	if x != nil {
		return x.ScalingTechnique
	}
	return ScalingTechnique_ScalingTechniqueUndefined
}

func (x *TransformSettings) GetEncodingTechnique() EncodingTechnique {
	if x != nil {
		return x.EncodingTechnique
	}
	return EncodingTechnique_EncodingTechniqueUndefined
}

func (x *TransformSettings) GetEmptiesStrategy() *EmptiesStrategy {
	if x != nil {
		return x.EmptiesStrategy
	}
	return nil
}

func (x *TransformSettings) GetOutlinersDetectingStrategy() *OutlinersDetectingStrategy {
	if x != nil {
		return x.OutlinersDetectingStrategy
	}
	return nil
}

func (x *TransformSettings) GetOutlinersReplacementStrategy() *OutlinersReplacementStrategy {
	if x != nil {
		return x.OutlinersReplacementStrategy
	}
	return nil
}

type LaunchDatasetTransformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo               *CommonLaunchInfo             `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	DatasetID                int64                         `protobuf:"varint,2,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	ColumnPreprocessSettings map[string]*TransformSettings `protobuf:"bytes,3,rep,name=columnPreprocessSettings,proto3" json:"columnPreprocessSettings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LaunchDatasetTransformRequest) Reset() {
	*x = LaunchDatasetTransformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchDatasetTransformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchDatasetTransformRequest) ProtoMessage() {}

func (x *LaunchDatasetTransformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchDatasetTransformRequest.ProtoReflect.Descriptor instead.
func (*LaunchDatasetTransformRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{18}
}

func (x *LaunchDatasetTransformRequest) GetLaunchInfo() *CommonLaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *LaunchDatasetTransformRequest) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *LaunchDatasetTransformRequest) GetColumnPreprocessSettings() map[string]*TransformSettings {
	if x != nil {
		return x.ColumnPreprocessSettings
	}
	return nil
}

type LaunchDatasetTransformResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *LaunchDatasetTransformResponse) Reset() {
	*x = LaunchDatasetTransformResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchDatasetTransformResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchDatasetTransformResponse) ProtoMessage() {}

func (x *LaunchDatasetTransformResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchDatasetTransformResponse.ProtoReflect.Descriptor instead.
func (*LaunchDatasetTransformResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{19}
}

func (x *LaunchDatasetTransformResponse) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetDatasetTransformLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *GetDatasetTransformLaunchRequest) Reset() {
	*x = GetDatasetTransformLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetTransformLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetTransformLaunchRequest) ProtoMessage() {}

func (x *GetDatasetTransformLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetTransformLaunchRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetTransformLaunchRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{20}
}

func (x *GetDatasetTransformLaunchRequest) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetDatasetTransformLaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo         *LaunchInfo        `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	Error              string             `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	DatasetID          int64              `protobuf:"varint,3,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	PreprocessSettings *TransformSettings `protobuf:"bytes,4,opt,name=preprocessSettings,proto3" json:"preprocessSettings,omitempty"`
}

func (x *GetDatasetTransformLaunchResponse) Reset() {
	*x = GetDatasetTransformLaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetTransformLaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetTransformLaunchResponse) ProtoMessage() {}

func (x *GetDatasetTransformLaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetTransformLaunchResponse.ProtoReflect.Descriptor instead.
func (*GetDatasetTransformLaunchResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{21}
}

func (x *GetDatasetTransformLaunchResponse) GetLaunchInfo() *LaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *GetDatasetTransformLaunchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetDatasetTransformLaunchResponse) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *GetDatasetTransformLaunchResponse) GetPreprocessSettings() *TransformSettings {
	if x != nil {
		return x.PreprocessSettings
	}
	return nil
}

type TrainingModelSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelID              uint64            `protobuf:"varint,1,opt,name=modelID,proto3" json:"modelID,omitempty"`
	HyperparameterValues map[uint64]string `protobuf:"bytes,2,rep,name=hyperparameterValues,proto3" json:"hyperparameterValues,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TrainingModelSettings) Reset() {
	*x = TrainingModelSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingModelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingModelSettings) ProtoMessage() {}

func (x *TrainingModelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingModelSettings.ProtoReflect.Descriptor instead.
func (*TrainingModelSettings) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{22}
}

func (x *TrainingModelSettings) GetModelID() uint64 {
	if x != nil {
		return x.ModelID
	}
	return 0
}

func (x *TrainingModelSettings) GetHyperparameterValues() map[uint64]string {
	if x != nil {
		return x.HyperparameterValues
	}
	return nil
}

type TrainingDatasetSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetID      uint64  `protobuf:"varint,1,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	TargetColumn   string  `protobuf:"bytes,2,opt,name=targetColumn,proto3" json:"targetColumn,omitempty"`
	TrainTestSplit float64 `protobuf:"fixed64,3,opt,name=trainTestSplit,proto3" json:"trainTestSplit,omitempty"`
}

func (x *TrainingDatasetSettings) Reset() {
	*x = TrainingDatasetSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingDatasetSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingDatasetSettings) ProtoMessage() {}

func (x *TrainingDatasetSettings) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingDatasetSettings.ProtoReflect.Descriptor instead.
func (*TrainingDatasetSettings) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{23}
}

func (x *TrainingDatasetSettings) GetDatasetID() uint64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *TrainingDatasetSettings) GetTargetColumn() string {
	if x != nil {
		return x.TargetColumn
	}
	return ""
}

func (x *TrainingDatasetSettings) GetTrainTestSplit() float64 {
	if x != nil {
		return x.TrainTestSplit
	}
	return 0
}

type LaunchTrainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo      *CommonLaunchInfo        `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	ModelSettings   *TrainingModelSettings   `protobuf:"bytes,2,opt,name=modelSettings,proto3" json:"modelSettings,omitempty"`
	DatasetSettings *TrainingDatasetSettings `protobuf:"bytes,3,opt,name=datasetSettings,proto3" json:"datasetSettings,omitempty"`
	UseCV           bool                     `protobuf:"varint,4,opt,name=useCV,proto3" json:"useCV,omitempty"`
	CvChunks        int64                    `protobuf:"varint,5,opt,name=cvChunks,proto3" json:"cvChunks,omitempty"`
	RandomSeed      int64                    `protobuf:"varint,6,opt,name=randomSeed,proto3" json:"randomSeed,omitempty"`
}

func (x *LaunchTrainRequest) Reset() {
	*x = LaunchTrainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchTrainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchTrainRequest) ProtoMessage() {}

func (x *LaunchTrainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchTrainRequest.ProtoReflect.Descriptor instead.
func (*LaunchTrainRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{24}
}

func (x *LaunchTrainRequest) GetLaunchInfo() *CommonLaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *LaunchTrainRequest) GetModelSettings() *TrainingModelSettings {
	if x != nil {
		return x.ModelSettings
	}
	return nil
}

func (x *LaunchTrainRequest) GetDatasetSettings() *TrainingDatasetSettings {
	if x != nil {
		return x.DatasetSettings
	}
	return nil
}

func (x *LaunchTrainRequest) GetUseCV() bool {
	if x != nil {
		return x.UseCV
	}
	return false
}

func (x *LaunchTrainRequest) GetCvChunks() int64 {
	if x != nil {
		return x.CvChunks
	}
	return 0
}

func (x *LaunchTrainRequest) GetRandomSeed() int64 {
	if x != nil {
		return x.RandomSeed
	}
	return 0
}

type LaunchTrainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *LaunchTrainResponse) Reset() {
	*x = LaunchTrainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchTrainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchTrainResponse) ProtoMessage() {}

func (x *LaunchTrainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchTrainResponse.ProtoReflect.Descriptor instead.
func (*LaunchTrainResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{25}
}

func (x *LaunchTrainResponse) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetTrainLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *GetTrainLaunchRequest) Reset() {
	*x = GetTrainLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTrainLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrainLaunchRequest) ProtoMessage() {}

func (x *GetTrainLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrainLaunchRequest.ProtoReflect.Descriptor instead.
func (*GetTrainLaunchRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{26}
}

func (x *GetTrainLaunchRequest) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetTrainLaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo     *LaunchInfo `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	Error          string      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	DatasetID      int64       `protobuf:"varint,3,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	TrainedModelID int64       `protobuf:"varint,4,opt,name=trainedModelID,proto3" json:"trainedModelID,omitempty"`
	MlflowRunID    string      `protobuf:"bytes,5,opt,name=mlflowRunID,proto3" json:"mlflowRunID,omitempty"`
}

func (x *GetTrainLaunchResponse) Reset() {
	*x = GetTrainLaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTrainLaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrainLaunchResponse) ProtoMessage() {}

func (x *GetTrainLaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrainLaunchResponse.ProtoReflect.Descriptor instead.
func (*GetTrainLaunchResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{27}
}

func (x *GetTrainLaunchResponse) GetLaunchInfo() *LaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *GetTrainLaunchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetTrainLaunchResponse) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *GetTrainLaunchResponse) GetTrainedModelID() int64 {
	if x != nil {
		return x.TrainedModelID
	}
	return 0
}

func (x *GetTrainLaunchResponse) GetMlflowRunID() string {
	if x != nil {
		return x.MlflowRunID
	}
	return ""
}

type PredictionModelSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TrainedModelID uint64 `protobuf:"varint,1,opt,name=trainedModelID,proto3" json:"trainedModelID,omitempty"`
}

func (x *PredictionModelSettings) Reset() {
	*x = PredictionModelSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionModelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionModelSettings) ProtoMessage() {}

func (x *PredictionModelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionModelSettings.ProtoReflect.Descriptor instead.
func (*PredictionModelSettings) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{28}
}

func (x *PredictionModelSettings) GetTrainedModelID() uint64 {
	if x != nil {
		return x.TrainedModelID
	}
	return 0
}

type PredictionDatasetSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId                        uint64 `protobuf:"varint,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	UsePreprocessingFromTrainDataset bool   `protobuf:"varint,2,opt,name=usePreprocessingFromTrainDataset,proto3" json:"usePreprocessingFromTrainDataset,omitempty"`
}

func (x *PredictionDatasetSettings) Reset() {
	*x = PredictionDatasetSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictionDatasetSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictionDatasetSettings) ProtoMessage() {}

func (x *PredictionDatasetSettings) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictionDatasetSettings.ProtoReflect.Descriptor instead.
func (*PredictionDatasetSettings) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{29}
}

func (x *PredictionDatasetSettings) GetDatasetId() uint64 {
	if x != nil {
		return x.DatasetId
	}
	return 0
}

func (x *PredictionDatasetSettings) GetUsePreprocessingFromTrainDataset() bool {
	if x != nil {
		return x.UsePreprocessingFromTrainDataset
	}
	return false
}

type LaunchPredictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo     *CommonLaunchInfo `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	TrainedModelID int64             `protobuf:"varint,2,opt,name=trainedModelID,proto3" json:"trainedModelID,omitempty"`
	DatasetID      int64             `protobuf:"varint,3,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
}

func (x *LaunchPredictRequest) Reset() {
	*x = LaunchPredictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchPredictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchPredictRequest) ProtoMessage() {}

func (x *LaunchPredictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchPredictRequest.ProtoReflect.Descriptor instead.
func (*LaunchPredictRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{30}
}

func (x *LaunchPredictRequest) GetLaunchInfo() *CommonLaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *LaunchPredictRequest) GetTrainedModelID() int64 {
	if x != nil {
		return x.TrainedModelID
	}
	return 0
}

func (x *LaunchPredictRequest) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

type LaunchPredictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *LaunchPredictResponse) Reset() {
	*x = LaunchPredictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchPredictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchPredictResponse) ProtoMessage() {}

func (x *LaunchPredictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchPredictResponse.ProtoReflect.Descriptor instead.
func (*LaunchPredictResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{31}
}

func (x *LaunchPredictResponse) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetPredictLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *GetPredictLaunchRequest) Reset() {
	*x = GetPredictLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredictLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredictLaunchRequest) ProtoMessage() {}

func (x *GetPredictLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredictLaunchRequest.ProtoReflect.Descriptor instead.
func (*GetPredictLaunchRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{32}
}

func (x *GetPredictLaunchRequest) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetPredictLaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo     *LaunchInfo `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	Error          string      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	DatasetID      int64       `protobuf:"varint,3,opt,name=datasetID,proto3" json:"datasetID,omitempty"`
	TrainedModelID int64       `protobuf:"varint,4,opt,name=trainedModelID,proto3" json:"trainedModelID,omitempty"`
}

func (x *GetPredictLaunchResponse) Reset() {
	*x = GetPredictLaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredictLaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredictLaunchResponse) ProtoMessage() {}

func (x *GetPredictLaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredictLaunchResponse.ProtoReflect.Descriptor instead.
func (*GetPredictLaunchResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{33}
}

func (x *GetPredictLaunchResponse) GetLaunchInfo() *LaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *GetPredictLaunchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetPredictLaunchResponse) GetDatasetID() int64 {
	if x != nil {
		return x.DatasetID
	}
	return 0
}

func (x *GetPredictLaunchResponse) GetTrainedModelID() int64 {
	if x != nil {
		return x.TrainedModelID
	}
	return 0
}

type LaunchGenericConvertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo    *CommonLaunchInfo `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	S3Object      string            `protobuf:"bytes,2,opt,name=s3Object,proto3" json:"s3Object,omitempty"`
	ConverterType string            `protobuf:"bytes,3,opt,name=converterType,proto3" json:"converterType,omitempty"`
}

func (x *LaunchGenericConvertRequest) Reset() {
	*x = LaunchGenericConvertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchGenericConvertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchGenericConvertRequest) ProtoMessage() {}

func (x *LaunchGenericConvertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchGenericConvertRequest.ProtoReflect.Descriptor instead.
func (*LaunchGenericConvertRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{34}
}

func (x *LaunchGenericConvertRequest) GetLaunchInfo() *CommonLaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *LaunchGenericConvertRequest) GetS3Object() string {
	if x != nil {
		return x.S3Object
	}
	return ""
}

func (x *LaunchGenericConvertRequest) GetConverterType() string {
	if x != nil {
		return x.ConverterType
	}
	return ""
}

type LaunchGenericConvertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *LaunchGenericConvertResponse) Reset() {
	*x = LaunchGenericConvertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchGenericConvertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchGenericConvertResponse) ProtoMessage() {}

func (x *LaunchGenericConvertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchGenericConvertResponse.ProtoReflect.Descriptor instead.
func (*LaunchGenericConvertResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{35}
}

func (x *LaunchGenericConvertResponse) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetGenericConvertLaunchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *GetGenericConvertLaunchRequest) Reset() {
	*x = GetGenericConvertLaunchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGenericConvertLaunchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGenericConvertLaunchRequest) ProtoMessage() {}

func (x *GetGenericConvertLaunchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGenericConvertLaunchRequest.ProtoReflect.Descriptor instead.
func (*GetGenericConvertLaunchRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{36}
}

func (x *GetGenericConvertLaunchRequest) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetGenericConvertLaunchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo    *LaunchInfo `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	Error         string      `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	InputS3Object string      `protobuf:"bytes,3,opt,name=inputS3Object,proto3" json:"inputS3Object,omitempty"`
	ConverterType string      `protobuf:"bytes,4,opt,name=converterType,proto3" json:"converterType,omitempty"`
	OutputS3File  string      `protobuf:"bytes,5,opt,name=outputS3File,proto3" json:"outputS3File,omitempty"`
}

func (x *GetGenericConvertLaunchResponse) Reset() {
	*x = GetGenericConvertLaunchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGenericConvertLaunchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGenericConvertLaunchResponse) ProtoMessage() {}

func (x *GetGenericConvertLaunchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGenericConvertLaunchResponse.ProtoReflect.Descriptor instead.
func (*GetGenericConvertLaunchResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{37}
}

func (x *GetGenericConvertLaunchResponse) GetLaunchInfo() *LaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *GetGenericConvertLaunchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GetGenericConvertLaunchResponse) GetInputS3Object() string {
	if x != nil {
		return x.InputS3Object
	}
	return ""
}

func (x *GetGenericConvertLaunchResponse) GetConverterType() string {
	if x != nil {
		return x.ConverterType
	}
	return ""
}

func (x *GetGenericConvertLaunchResponse) GetOutputS3File() string {
	if x != nil {
		return x.OutputS3File
	}
	return ""
}

type WaitForLaunchFinishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *WaitForLaunchFinishRequest) Reset() {
	*x = WaitForLaunchFinishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForLaunchFinishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForLaunchFinishRequest) ProtoMessage() {}

func (x *WaitForLaunchFinishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForLaunchFinishRequest.ProtoReflect.Descriptor instead.
func (*WaitForLaunchFinishRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{38}
}

func (x *WaitForLaunchFinishRequest) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type WaitForLaunchFinishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WaitForLaunchFinishResponse) Reset() {
	*x = WaitForLaunchFinishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForLaunchFinishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForLaunchFinishResponse) ProtoMessage() {}

func (x *WaitForLaunchFinishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForLaunchFinishResponse.ProtoReflect.Descriptor instead.
func (*WaitForLaunchFinishResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{39}
}

type GetPredictionResultDownloadLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID int64 `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
}

func (x *GetPredictionResultDownloadLinkRequest) Reset() {
	*x = GetPredictionResultDownloadLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredictionResultDownloadLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredictionResultDownloadLinkRequest) ProtoMessage() {}

func (x *GetPredictionResultDownloadLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredictionResultDownloadLinkRequest.ProtoReflect.Descriptor instead.
func (*GetPredictionResultDownloadLinkRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{40}
}

func (x *GetPredictionResultDownloadLinkRequest) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

type GetPredictionResultDownloadLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownloadLink string `protobuf:"bytes,1,opt,name=downloadLink,proto3" json:"downloadLink,omitempty"`
}

func (x *GetPredictionResultDownloadLinkResponse) Reset() {
	*x = GetPredictionResultDownloadLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPredictionResultDownloadLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPredictionResultDownloadLinkResponse) ProtoMessage() {}

func (x *GetPredictionResultDownloadLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPredictionResultDownloadLinkResponse.ProtoReflect.Descriptor instead.
func (*GetPredictionResultDownloadLinkResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{41}
}

func (x *GetPredictionResultDownloadLinkResponse) GetDownloadLink() string {
	if x != nil {
		return x.DownloadLink
	}
	return ""
}

type LaunchFilePresignedUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchInfo *CommonLaunchInfo `protobuf:"bytes,1,opt,name=launchInfo,proto3" json:"launchInfo,omitempty"`
	Filename   string            `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *LaunchFilePresignedUploadRequest) Reset() {
	*x = LaunchFilePresignedUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchFilePresignedUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchFilePresignedUploadRequest) ProtoMessage() {}

func (x *LaunchFilePresignedUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchFilePresignedUploadRequest.ProtoReflect.Descriptor instead.
func (*LaunchFilePresignedUploadRequest) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{42}
}

func (x *LaunchFilePresignedUploadRequest) GetLaunchInfo() *CommonLaunchInfo {
	if x != nil {
		return x.LaunchInfo
	}
	return nil
}

func (x *LaunchFilePresignedUploadRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type LaunchFilePresignedUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LaunchID  int64  `protobuf:"varint,1,opt,name=launchID,proto3" json:"launchID,omitempty"`
	UploadURL string `protobuf:"bytes,2,opt,name=uploadURL,proto3" json:"uploadURL,omitempty"`
}

func (x *LaunchFilePresignedUploadResponse) Reset() {
	*x = LaunchFilePresignedUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_launcher_launcher_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchFilePresignedUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchFilePresignedUploadResponse) ProtoMessage() {}

func (x *LaunchFilePresignedUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_launcher_launcher_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchFilePresignedUploadResponse.ProtoReflect.Descriptor instead.
func (*LaunchFilePresignedUploadResponse) Descriptor() ([]byte, []int) {
	return file_launcher_launcher_proto_rawDescGZIP(), []int{43}
}

func (x *LaunchFilePresignedUploadResponse) GetLaunchID() int64 {
	if x != nil {
		return x.LaunchID
	}
	return 0
}

func (x *LaunchFilePresignedUploadResponse) GetUploadURL() string {
	if x != nil {
		return x.UploadURL
	}
	return ""
}

var File_launcher_launcher_proto protoreflect.FileDescriptor

var file_launcher_launcher_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x84, 0x02, 0x0a, 0x0a,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0a,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x36, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68,
	0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa8, 0x01, 0x0a, 0x1a, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a,
	0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x1b, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0x3b, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x49, 0x44, 0x22, 0xcc, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x22, 0xd2, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x66, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x03, 0x0a, 0x1c, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x79, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x57, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x1a, 0x79, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68,
	0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x1d, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0xa6, 0x03, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0a,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x7d, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x79, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x88, 0x02, 0x0a, 0x0f, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x66, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x10, 0x66, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x69, 0x0a, 0x11,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x65, 0x72, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x1a,
	0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x53, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x6d, 0x61, 0x78, 0x22, 0x8f, 0x02, 0x0a, 0x1c, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x64, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdf, 0x04, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x66, 0x0a, 0x10, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68,
	0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x52, 0x10, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x52, 0x11, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x63,
	0x0a, 0x0f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x0f, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x65, 0x73, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x84, 0x01, 0x0a, 0x1a, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x1a,
	0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x8a, 0x01, 0x0a, 0x1c, 0x6f,
	0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x1c, 0x6f, 0x75, 0x74, 0x6c, 0x69,
	0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xc8, 0x03, 0x0a, 0x1d, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0a, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x12, 0xa1, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x88, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3c, 0x0a, 0x1e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x22, 0x3e, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x22, 0x9a, 0x02, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x6b, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x70, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x8a, 0x02,
	0x0a, 0x15, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x44, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x59, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x47, 0x0a, 0x19, 0x48, 0x79, 0x70, 0x65, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x17, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x22, 0x96, 0x03, 0x0a, 0x12, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x65, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6b, 0x0a, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x43, 0x56,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x75, 0x73, 0x65, 0x43, 0x56, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x76, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x76, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64, 0x22, 0x31, 0x0a, 0x13, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49,
	0x44, 0x22, 0xec, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0a,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6c, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x75, 0x6e, 0x49, 0x44,
	0x22, 0x41, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x44, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x20, 0x75, 0x73, 0x65, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x75, 0x73, 0x65, 0x50,
	0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x6f, 0x6d,
	0x54, 0x72, 0x61, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x22, 0xb8, 0x01, 0x0a,
	0x14, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x15, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0x35, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x22, 0xcc, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x49, 0x44, 0x22, 0xbb, 0x01, 0x0a, 0x1b, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5a, 0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x33, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x33, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x3a, 0x0a, 0x1c, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0x3c, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0xfd, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x33, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x33, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x53, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x53, 0x33, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x1a, 0x57, 0x61,
	0x69, 0x74, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x49, 0x44, 0x22, 0x1d, 0x0a, 0x1b, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x22, 0x4d, 0x0a, 0x27, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x9a, 0x01, 0x0a, 0x20, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x0a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x21, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x55, 0x52, 0x4c, 0x2a, 0x8f, 0x01, 0x0a, 0x0c, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x10, 0x04, 0x2a, 0xe3, 0x01, 0x0a, 0x0a, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x15, 0x0a,
	0x11, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x07, 0x2a, 0x82, 0x01, 0x0a,
	0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x61, 0x6c, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10,
	0x04, 0x2a, 0xb6, 0x01, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x46,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x10, 0x04, 0x2a, 0xc2, 0x01, 0x0a, 0x11, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x6f, 0x73, 0x74, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x2a,
	0x79, 0x0a, 0x10, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x2a, 0x7c, 0x0a, 0x11, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x4f, 0x6e, 0x65, 0x48, 0x6f, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x2a, 0xb5, 0x01, 0x0a, 0x15, 0x4f, 0x75, 0x74,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x73, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x4f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x49, 0x51, 0x52, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x10, 0x03,
	0x32, 0xb0, 0x1d, 0x0a, 0x0f, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0xba, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x12, 0x3c, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2e, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12,
	0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x12, 0xe4, 0x01, 0x0a, 0x13, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0xf5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x12, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x7b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x7d,
	0x12, 0xed, 0x01, 0x0a, 0x15, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x47, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x92, 0x41, 0x13,
	0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x12, 0xfe, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x49, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44,
	0x7d, 0x12, 0xf1, 0x01, 0x0a, 0x16, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x47, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68,
	0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72,
	0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x44, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a,
	0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x82, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x12, 0x4a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x92, 0x41,
	0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x2f,
	0x7b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x7d, 0x12, 0xc3, 0x01, 0x0a, 0x0b, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x3c, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x12, 0xd4, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x12, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x2f, 0x7b, 0x6c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x7d, 0x12, 0xcb, 0x01, 0x0a, 0x0d, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x92, 0x41, 0x13, 0x62,
	0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0xdc, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x12, 0x41, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e,
	0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x41, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12,
	0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x2f, 0x7b, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x49, 0x44, 0x7d, 0x12, 0x92, 0x02, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x50, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x92,
	0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x2f, 0x7b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x7d,
	0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0xe8, 0x01, 0x0a, 0x14, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x12, 0x45, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x41, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a,
	0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x12, 0xf9, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x12, 0x48, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x2f, 0x7b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x7d,
	0x12, 0xeb, 0x01, 0x0a, 0x19, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f,
	0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0xe2,
	0x01, 0x0a, 0x13, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x44, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65,
	0x72, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x68, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x4c,
	0x61, 0x75, 0x6e, 0x63, 0x68, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3e, 0x92, 0x41, 0x13, 0x62, 0x11, 0x0a, 0x0f, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x2f, 0x7b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x44, 0x7d, 0x2f, 0x77,
	0x61, 0x69, 0x74, 0x42, 0x96, 0x02, 0x92, 0x41, 0xdb, 0x01, 0x12, 0x46, 0x0a, 0x1a, 0x48, 0x53,
	0x45, 0x20, 0x4d, 0x4c, 0x4f, 0x70, 0x73, 0x20, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72,
	0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x65, 0x72, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x6d,
	0x6c, 0x6f, 0x70, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x32, 0x03, 0x31,
	0x2e, 0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x6a, 0x0a, 0x68, 0x0a, 0x0b, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x59, 0x08, 0x02, 0x12, 0x44,
	0x45, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
	0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x60, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x3a, 0x20, 0x60, 0x20, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x2c, 0x20, 0x65, 0x2e, 0x67, 0x2e,
	0x20, 0x22, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x31, 0x32,
	0x33, 0x34, 0x35, 0x22, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x02, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x68, 0x73, 0x65, 0x2d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x65, 0x72, 0x3b, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_launcher_launcher_proto_rawDescOnce sync.Once
	file_launcher_launcher_proto_rawDescData = file_launcher_launcher_proto_rawDesc
)

func file_launcher_launcher_proto_rawDescGZIP() []byte {
	file_launcher_launcher_proto_rawDescOnce.Do(func() {
		file_launcher_launcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_launcher_launcher_proto_rawDescData)
	})
	return file_launcher_launcher_proto_rawDescData
}

var file_launcher_launcher_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_launcher_launcher_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_launcher_launcher_proto_goTypes = []interface{}{
	(LaunchStatus)(0),                               // 0: github.hse_experiments_platform.launcher.LaunchStatus
	(LaunchType)(0),                                 // 1: github.hse_experiments_platform.launcher.LaunchType
	(ColumnType)(0),                                 // 2: github.hse_experiments_platform.launcher.ColumnType
	(FillingTechnique)(0),                           // 3: github.hse_experiments_platform.launcher.FillingTechnique
	(AggregateFunction)(0),                          // 4: github.hse_experiments_platform.launcher.AggregateFunction
	(ScalingTechnique)(0),                           // 5: github.hse_experiments_platform.launcher.ScalingTechnique
	(EncodingTechnique)(0),                          // 6: github.hse_experiments_platform.launcher.EncodingTechnique
	(OutlinesDetectingMode)(0),                      // 7: github.hse_experiments_platform.launcher.OutlinesDetectingMode
	(*PageInfo)(nil),                                // 8: github.hse_experiments_platform.launcher.PageInfo
	(*LaunchInfo)(nil),                              // 9: github.hse_experiments_platform.launcher.LaunchInfo
	(*GetLaunchesRequest)(nil),                      // 10: github.hse_experiments_platform.launcher.GetLaunchesRequest
	(*GetLaunchesResponse)(nil),                     // 11: github.hse_experiments_platform.launcher.GetLaunchesResponse
	(*CommonLaunchInfo)(nil),                        // 12: github.hse_experiments_platform.launcher.CommonLaunchInfo
	(*LaunchDatasetUploadRequest)(nil),              // 13: github.hse_experiments_platform.launcher.LaunchDatasetUploadRequest
	(*LaunchDatasetUploadResponse)(nil),             // 14: github.hse_experiments_platform.launcher.LaunchDatasetUploadResponse
	(*GetDatasetUploadLaunchRequest)(nil),           // 15: github.hse_experiments_platform.launcher.GetDatasetUploadLaunchRequest
	(*GetDatasetUploadLaunchResponse)(nil),          // 16: github.hse_experiments_platform.launcher.GetDatasetUploadLaunchResponse
	(*SetTypeSettings)(nil),                         // 17: github.hse_experiments_platform.launcher.SetTypeSettings
	(*LaunchDatasetSetTypesRequest)(nil),            // 18: github.hse_experiments_platform.launcher.LaunchDatasetSetTypesRequest
	(*LaunchDatasetSetTypesResponse)(nil),           // 19: github.hse_experiments_platform.launcher.LaunchDatasetSetTypesResponse
	(*GetDatasetSetTypesLaunchRequest)(nil),         // 20: github.hse_experiments_platform.launcher.GetDatasetSetTypesLaunchRequest
	(*GetDatasetSetTypesLaunchResponse)(nil),        // 21: github.hse_experiments_platform.launcher.GetDatasetSetTypesLaunchResponse
	(*EmptiesStrategy)(nil),                         // 22: github.hse_experiments_platform.launcher.EmptiesStrategy
	(*OutlinersDetectingStrategy)(nil),              // 23: github.hse_experiments_platform.launcher.OutlinersDetectingStrategy
	(*OutlinersReplacementStrategy)(nil),            // 24: github.hse_experiments_platform.launcher.OutlinersReplacementStrategy
	(*TransformSettings)(nil),                       // 25: github.hse_experiments_platform.launcher.TransformSettings
	(*LaunchDatasetTransformRequest)(nil),           // 26: github.hse_experiments_platform.launcher.LaunchDatasetTransformRequest
	(*LaunchDatasetTransformResponse)(nil),          // 27: github.hse_experiments_platform.launcher.LaunchDatasetTransformResponse
	(*GetDatasetTransformLaunchRequest)(nil),        // 28: github.hse_experiments_platform.launcher.GetDatasetTransformLaunchRequest
	(*GetDatasetTransformLaunchResponse)(nil),       // 29: github.hse_experiments_platform.launcher.GetDatasetTransformLaunchResponse
	(*TrainingModelSettings)(nil),                   // 30: github.hse_experiments_platform.launcher.TrainingModelSettings
	(*TrainingDatasetSettings)(nil),                 // 31: github.hse_experiments_platform.launcher.TrainingDatasetSettings
	(*LaunchTrainRequest)(nil),                      // 32: github.hse_experiments_platform.launcher.LaunchTrainRequest
	(*LaunchTrainResponse)(nil),                     // 33: github.hse_experiments_platform.launcher.LaunchTrainResponse
	(*GetTrainLaunchRequest)(nil),                   // 34: github.hse_experiments_platform.launcher.GetTrainLaunchRequest
	(*GetTrainLaunchResponse)(nil),                  // 35: github.hse_experiments_platform.launcher.GetTrainLaunchResponse
	(*PredictionModelSettings)(nil),                 // 36: github.hse_experiments_platform.launcher.PredictionModelSettings
	(*PredictionDatasetSettings)(nil),               // 37: github.hse_experiments_platform.launcher.PredictionDatasetSettings
	(*LaunchPredictRequest)(nil),                    // 38: github.hse_experiments_platform.launcher.LaunchPredictRequest
	(*LaunchPredictResponse)(nil),                   // 39: github.hse_experiments_platform.launcher.LaunchPredictResponse
	(*GetPredictLaunchRequest)(nil),                 // 40: github.hse_experiments_platform.launcher.GetPredictLaunchRequest
	(*GetPredictLaunchResponse)(nil),                // 41: github.hse_experiments_platform.launcher.GetPredictLaunchResponse
	(*LaunchGenericConvertRequest)(nil),             // 42: github.hse_experiments_platform.launcher.LaunchGenericConvertRequest
	(*LaunchGenericConvertResponse)(nil),            // 43: github.hse_experiments_platform.launcher.LaunchGenericConvertResponse
	(*GetGenericConvertLaunchRequest)(nil),          // 44: github.hse_experiments_platform.launcher.GetGenericConvertLaunchRequest
	(*GetGenericConvertLaunchResponse)(nil),         // 45: github.hse_experiments_platform.launcher.GetGenericConvertLaunchResponse
	(*WaitForLaunchFinishRequest)(nil),              // 46: github.hse_experiments_platform.launcher.WaitForLaunchFinishRequest
	(*WaitForLaunchFinishResponse)(nil),             // 47: github.hse_experiments_platform.launcher.WaitForLaunchFinishResponse
	(*GetPredictionResultDownloadLinkRequest)(nil),  // 48: github.hse_experiments_platform.launcher.GetPredictionResultDownloadLinkRequest
	(*GetPredictionResultDownloadLinkResponse)(nil), // 49: github.hse_experiments_platform.launcher.GetPredictionResultDownloadLinkResponse
	(*LaunchFilePresignedUploadRequest)(nil),        // 50: github.hse_experiments_platform.launcher.LaunchFilePresignedUploadRequest
	(*LaunchFilePresignedUploadResponse)(nil),       // 51: github.hse_experiments_platform.launcher.LaunchFilePresignedUploadResponse
	nil, // 52: github.hse_experiments_platform.launcher.LaunchDatasetSetTypesRequest.ColumnTypesEntry
	nil, // 53: github.hse_experiments_platform.launcher.GetDatasetSetTypesLaunchResponse.ColumnTypesEntry
	nil, // 54: github.hse_experiments_platform.launcher.LaunchDatasetTransformRequest.ColumnPreprocessSettingsEntry
	nil, // 55: github.hse_experiments_platform.launcher.TrainingModelSettings.HyperparameterValuesEntry
}
var file_launcher_launcher_proto_depIdxs = []int32{
	1,  // 0: github.hse_experiments_platform.launcher.LaunchInfo.launchType:type_name -> github.hse_experiments_platform.launcher.LaunchType
	0,  // 1: github.hse_experiments_platform.launcher.LaunchInfo.status:type_name -> github.hse_experiments_platform.launcher.LaunchStatus
	1,  // 2: github.hse_experiments_platform.launcher.GetLaunchesRequest.launchType:type_name -> github.hse_experiments_platform.launcher.LaunchType
	9,  // 3: github.hse_experiments_platform.launcher.GetLaunchesResponse.launches:type_name -> github.hse_experiments_platform.launcher.LaunchInfo
	8,  // 4: github.hse_experiments_platform.launcher.GetLaunchesResponse.pageInfo:type_name -> github.hse_experiments_platform.launcher.PageInfo
	12, // 5: github.hse_experiments_platform.launcher.LaunchDatasetUploadRequest.launchInfo:type_name -> github.hse_experiments_platform.launcher.CommonLaunchInfo
	9,  // 6: github.hse_experiments_platform.launcher.GetDatasetUploadLaunchResponse.launchInfo:type_name -> github.hse_experiments_platform.launcher.LaunchInfo
	2,  // 7: github.hse_experiments_platform.launcher.SetTypeSettings.type:type_name -> github.hse_experiments_platform.launcher.ColumnType
	3,  // 8: github.hse_experiments_platform.launcher.SetTypeSettings.fillingTechnique:type_name -> github.hse_experiments_platform.launcher.FillingTechnique
	4,  // 9: github.hse_experiments_platform.launcher.SetTypeSettings.aggregateFunction:type_name -> github.hse_experiments_platform.launcher.AggregateFunction
	12, // 10: github.hse_experiments_platform.launcher.LaunchDatasetSetTypesRequest.launchInfo:type_name -> github.hse_experiments_platform.launcher.CommonLaunchInfo
	52, // 11: github.hse_experiments_platform.launcher.LaunchDatasetSetTypesRequest.columnTypes:type_name -> github.hse_experiments_platform.launcher.LaunchDatasetSetTypesRequest.ColumnTypesEntry
	9,  // 12: github.hse_experiments_platform.launcher.GetDatasetSetTypesLaunchResponse.launchInfo:type_name -> github.hse_experiments_platform.launcher.LaunchInfo
	53, // 13: github.hse_experiments_platform.launcher.GetDatasetSetTypesLaunchResponse.columnTypes:type_name -> github.hse_experiments_platform.launcher.GetDatasetSetTypesLaunchResponse.ColumnTypesEntry
	3,  // 14: github.hse_experiments_platform.launcher.EmptiesStrategy.fillingTechnique:type_name -> github.hse_experiments_platform.launcher.FillingTechnique
	4,  // 15: github.hse_experiments_platform.launcher.EmptiesStrategy.aggregateFunction:type_name -> github.hse_experiments_platform.launcher.AggregateFunction
	7,  // 16: github.hse_experiments_platform.launcher.OutlinersDetectingStrategy.mode:type_name -> github.hse_experiments_platform.launcher.OutlinesDetectingMode
	3,  // 17: github.hse_experiments_platform.launcher.OutlinersReplacementStrategy.replacementMode:type_name -> github.hse_experiments_platform.launcher.FillingTechnique
	4,  // 18: github.hse_experiments_platform.launcher.OutlinersReplacementStrategy.aggregateValue:type_name -> github.hse_experiments_platform.launcher.AggregateFunction
	5,  // 19: github.hse_experiments_platform.launcher.TransformSettings.scalingTechnique:type_name -> github.hse_experiments_platform.launcher.ScalingTechnique
	6,  // 20: github.hse_experiments_platform.launcher.TransformSettings.encodingTechnique:type_name -> github.hse_experiments_platform.launcher.EncodingTechnique
	22, // 21: github.hse_experiments_platform.launcher.TransformSettings.emptiesStrategy:type_name -> github.hse_experiments_platform.launcher.EmptiesStrategy
	23, // 22: github.hse_experiments_platform.launcher.TransformSettings.outlinersDetectingStrategy:type_name -> github.hse_experiments_platform.launcher.OutlinersDetectingStrategy
	24, // 23: github.hse_experiments_platform.launcher.TransformSettings.outlinersReplacementStrategy:type_name -> github.hse_experiments_platform.launcher.OutlinersReplacementStrategy
	12, // 24: github.hse_experiments_platform.launcher.LaunchDatasetTransformRequest.launchInfo:type_name -> github.hse_experiments_platform.launcher.CommonLaunchInfo
	54, // 25: github.hse_experiments_platform.launcher.LaunchDatasetTransformRequest.columnPreprocessSettings:type_name -> github.hse_experiments_platform.launcher.LaunchDatasetTransformRequest.ColumnPreprocessSettingsEntry
	9,  // 26: github.hse_experiments_platform.launcher.GetDatasetTransformLaunchResponse.launchInfo:type_name -> github.hse_experiments_platform.launcher.LaunchInfo
	25, // 27: github.hse_experiments_platform.launcher.GetDatasetTransformLaunchResponse.preprocessSettings:type_name -> github.hse_experiments_platform.launcher.TransformSettings
	55, // 28: github.hse_experiments_platform.launcher.TrainingModelSettings.hyperparameterValues:type_name -> github.hse_experiments_platform.launcher.TrainingModelSettings.HyperparameterValuesEntry
	12, // 29: github.hse_experiments_platform.launcher.LaunchTrainRequest.launchInfo:type_name -> github.hse_experiments_platform.launcher.CommonLaunchInfo
	30, // 30: github.hse_experiments_platform.launcher.LaunchTrainRequest.modelSettings:type_name -> github.hse_experiments_platform.launcher.TrainingModelSettings
	31, // 31: github.hse_experiments_platform.launcher.LaunchTrainRequest.datasetSettings:type_name -> github.hse_experiments_platform.launcher.TrainingDatasetSettings
	9,  // 32: github.hse_experiments_platform.launcher.GetTrainLaunchResponse.launchInfo:type_name -> github.hse_experiments_platform.launcher.LaunchInfo
	12, // 33: github.hse_experiments_platform.launcher.LaunchPredictRequest.launchInfo:type_name -> github.hse_experiments_platform.launcher.CommonLaunchInfo
	9,  // 34: github.hse_experiments_platform.launcher.GetPredictLaunchResponse.launchInfo:type_name -> github.hse_experiments_platform.launcher.LaunchInfo
	12, // 35: github.hse_experiments_platform.launcher.LaunchGenericConvertRequest.launchInfo:type_name -> github.hse_experiments_platform.launcher.CommonLaunchInfo
	9,  // 36: github.hse_experiments_platform.launcher.GetGenericConvertLaunchResponse.launchInfo:type_name -> github.hse_experiments_platform.launcher.LaunchInfo
	12, // 37: github.hse_experiments_platform.launcher.LaunchFilePresignedUploadRequest.launchInfo:type_name -> github.hse_experiments_platform.launcher.CommonLaunchInfo
	17, // 38: github.hse_experiments_platform.launcher.LaunchDatasetSetTypesRequest.ColumnTypesEntry.value:type_name -> github.hse_experiments_platform.launcher.SetTypeSettings
	17, // 39: github.hse_experiments_platform.launcher.GetDatasetSetTypesLaunchResponse.ColumnTypesEntry.value:type_name -> github.hse_experiments_platform.launcher.SetTypeSettings
	25, // 40: github.hse_experiments_platform.launcher.LaunchDatasetTransformRequest.ColumnPreprocessSettingsEntry.value:type_name -> github.hse_experiments_platform.launcher.TransformSettings
	10, // 41: github.hse_experiments_platform.launcher.LauncherService.GetLaunches:input_type -> github.hse_experiments_platform.launcher.GetLaunchesRequest
	13, // 42: github.hse_experiments_platform.launcher.LauncherService.LaunchDatasetUpload:input_type -> github.hse_experiments_platform.launcher.LaunchDatasetUploadRequest
	15, // 43: github.hse_experiments_platform.launcher.LauncherService.GetDatasetUploadLaunch:input_type -> github.hse_experiments_platform.launcher.GetDatasetUploadLaunchRequest
	18, // 44: github.hse_experiments_platform.launcher.LauncherService.LaunchDatasetSetTypes:input_type -> github.hse_experiments_platform.launcher.LaunchDatasetSetTypesRequest
	20, // 45: github.hse_experiments_platform.launcher.LauncherService.GetDatasetSetTypesLaunch:input_type -> github.hse_experiments_platform.launcher.GetDatasetSetTypesLaunchRequest
	26, // 46: github.hse_experiments_platform.launcher.LauncherService.LaunchDatasetTransform:input_type -> github.hse_experiments_platform.launcher.LaunchDatasetTransformRequest
	28, // 47: github.hse_experiments_platform.launcher.LauncherService.GetDatasetTransformLaunch:input_type -> github.hse_experiments_platform.launcher.GetDatasetTransformLaunchRequest
	32, // 48: github.hse_experiments_platform.launcher.LauncherService.LaunchTrain:input_type -> github.hse_experiments_platform.launcher.LaunchTrainRequest
	34, // 49: github.hse_experiments_platform.launcher.LauncherService.GetTrainLaunch:input_type -> github.hse_experiments_platform.launcher.GetTrainLaunchRequest
	38, // 50: github.hse_experiments_platform.launcher.LauncherService.LaunchPredict:input_type -> github.hse_experiments_platform.launcher.LaunchPredictRequest
	40, // 51: github.hse_experiments_platform.launcher.LauncherService.GetPredictLaunch:input_type -> github.hse_experiments_platform.launcher.GetPredictLaunchRequest
	48, // 52: github.hse_experiments_platform.launcher.LauncherService.GetPredictionResultDownloadLink:input_type -> github.hse_experiments_platform.launcher.GetPredictionResultDownloadLinkRequest
	42, // 53: github.hse_experiments_platform.launcher.LauncherService.LaunchGenericConvert:input_type -> github.hse_experiments_platform.launcher.LaunchGenericConvertRequest
	44, // 54: github.hse_experiments_platform.launcher.LauncherService.GetGenericConvertLaunch:input_type -> github.hse_experiments_platform.launcher.GetGenericConvertLaunchRequest
	50, // 55: github.hse_experiments_platform.launcher.LauncherService.LaunchFilePresignedUpload:input_type -> github.hse_experiments_platform.launcher.LaunchFilePresignedUploadRequest
	46, // 56: github.hse_experiments_platform.launcher.LauncherService.WaitForLaunchFinish:input_type -> github.hse_experiments_platform.launcher.WaitForLaunchFinishRequest
	11, // 57: github.hse_experiments_platform.launcher.LauncherService.GetLaunches:output_type -> github.hse_experiments_platform.launcher.GetLaunchesResponse
	14, // 58: github.hse_experiments_platform.launcher.LauncherService.LaunchDatasetUpload:output_type -> github.hse_experiments_platform.launcher.LaunchDatasetUploadResponse
	16, // 59: github.hse_experiments_platform.launcher.LauncherService.GetDatasetUploadLaunch:output_type -> github.hse_experiments_platform.launcher.GetDatasetUploadLaunchResponse
	19, // 60: github.hse_experiments_platform.launcher.LauncherService.LaunchDatasetSetTypes:output_type -> github.hse_experiments_platform.launcher.LaunchDatasetSetTypesResponse
	21, // 61: github.hse_experiments_platform.launcher.LauncherService.GetDatasetSetTypesLaunch:output_type -> github.hse_experiments_platform.launcher.GetDatasetSetTypesLaunchResponse
	27, // 62: github.hse_experiments_platform.launcher.LauncherService.LaunchDatasetTransform:output_type -> github.hse_experiments_platform.launcher.LaunchDatasetTransformResponse
	29, // 63: github.hse_experiments_platform.launcher.LauncherService.GetDatasetTransformLaunch:output_type -> github.hse_experiments_platform.launcher.GetDatasetTransformLaunchResponse
	33, // 64: github.hse_experiments_platform.launcher.LauncherService.LaunchTrain:output_type -> github.hse_experiments_platform.launcher.LaunchTrainResponse
	35, // 65: github.hse_experiments_platform.launcher.LauncherService.GetTrainLaunch:output_type -> github.hse_experiments_platform.launcher.GetTrainLaunchResponse
	39, // 66: github.hse_experiments_platform.launcher.LauncherService.LaunchPredict:output_type -> github.hse_experiments_platform.launcher.LaunchPredictResponse
	41, // 67: github.hse_experiments_platform.launcher.LauncherService.GetPredictLaunch:output_type -> github.hse_experiments_platform.launcher.GetPredictLaunchResponse
	49, // 68: github.hse_experiments_platform.launcher.LauncherService.GetPredictionResultDownloadLink:output_type -> github.hse_experiments_platform.launcher.GetPredictionResultDownloadLinkResponse
	43, // 69: github.hse_experiments_platform.launcher.LauncherService.LaunchGenericConvert:output_type -> github.hse_experiments_platform.launcher.LaunchGenericConvertResponse
	45, // 70: github.hse_experiments_platform.launcher.LauncherService.GetGenericConvertLaunch:output_type -> github.hse_experiments_platform.launcher.GetGenericConvertLaunchResponse
	51, // 71: github.hse_experiments_platform.launcher.LauncherService.LaunchFilePresignedUpload:output_type -> github.hse_experiments_platform.launcher.LaunchFilePresignedUploadResponse
	47, // 72: github.hse_experiments_platform.launcher.LauncherService.WaitForLaunchFinish:output_type -> github.hse_experiments_platform.launcher.WaitForLaunchFinishResponse
	57, // [57:73] is the sub-list for method output_type
	41, // [41:57] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_launcher_launcher_proto_init() }
func file_launcher_launcher_proto_init() {
	if File_launcher_launcher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_launcher_launcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLaunchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLaunchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonLaunchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchDatasetUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchDatasetUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetUploadLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetUploadLaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTypeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchDatasetSetTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchDatasetSetTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetSetTypesLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetSetTypesLaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptiesStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutlinersDetectingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutlinersReplacementStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchDatasetTransformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchDatasetTransformResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetTransformLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetTransformLaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingModelSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingDatasetSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchTrainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchTrainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTrainLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTrainLaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionModelSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictionDatasetSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchPredictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchPredictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredictLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredictLaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchGenericConvertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchGenericConvertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGenericConvertLaunchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGenericConvertLaunchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForLaunchFinishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForLaunchFinishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredictionResultDownloadLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPredictionResultDownloadLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchFilePresignedUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_launcher_launcher_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchFilePresignedUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_launcher_launcher_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_launcher_launcher_proto_goTypes,
		DependencyIndexes: file_launcher_launcher_proto_depIdxs,
		EnumInfos:         file_launcher_launcher_proto_enumTypes,
		MessageInfos:      file_launcher_launcher_proto_msgTypes,
	}.Build()
	File_launcher_launcher_proto = out.File
	file_launcher_launcher_proto_rawDesc = nil
	file_launcher_launcher_proto_goTypes = nil
	file_launcher_launcher_proto_depIdxs = nil
}
